"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[394],{6001:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return c}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=(n(6396),n(8215),n(9055)),s=n(4214),d=["components"],u={title:"FutureProvider"},l=void 0,p={unversionedId:"providers/future_provider",id:"providers/future_provider",title:"FutureProvider",description:"p\xe1gina n\xe3o traduzida, ainda.",source:"@site/i18n/pt-BR/docusaurus-plugin-content-docs/current/providers/future_provider.mdx",sourceDirName:"providers",slug:"/providers/future_provider",permalink:"/riverpod/docs/providers/future_provider",editUrl:"https://github.com/rrousselGit/river_pod/edit/master/website/i18n/pt-BR/docusaurus-plugin-content-docs/current/providers/future_provider.mdx",tags:[],version:"current",frontMatter:{title:"FutureProvider"},sidebar:"Sidebar",previous:{title:"StateNotifierProvider",permalink:"/riverpod/docs/providers/state_notifier_provider"},next:{title:"StreamProvider",permalink:"/riverpod/docs/providers/stream_provider"}},c=[{value:"Usage example: reading a configuration file",id:"usage-example-reading-a-configuration-file",children:[],level:2}],f={toc:c};function m(e){var t=e.components,n=(0,i.Z)(e,d);return(0,o.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"p\xe1gina n\xe3o traduzida, ainda."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"FutureProvider")," is the equivalent of ",(0,o.kt)("a",{parentName:"p",href:"./provider"},"Provider")," but for asynchronous code."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"FutureProvider")," is typically used for:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"performing and caching asynchronous operations (such as network requests)"),(0,o.kt)("li",{parentName:"ul"},"nicely handling error/loading states of asynchronous operations"),(0,o.kt)("li",{parentName:"ul"},"combining multiple asynchronous values into another value")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"FutureProvider")," gains a lot when combined with ",(0,o.kt)("a",{parentName:"p",href:"../concepts/reading#using-refwatch-to-observe-a-provider"},"ref.watch"),". This combination\nallows automatic re-fetching of some data when some variables change,\nensuring that we always have the most up-to-date value."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("inlineCode",{parentName:"p"},"FutureProvider")," does not offer a way of directly modifying the computation after\na user interaction. It is designed to solve simple use-cases.",(0,o.kt)("br",{parentName:"p"}),"\n","For more advanced scenarios, consider using ",(0,o.kt)("a",{parentName:"p",href:"./state_notifier_provider"},"StateNotifierProvider"),"."))),(0,o.kt)("h2",{id:"usage-example-reading-a-configuration-file"},"Usage example: reading a configuration file"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"FutureProvider")," can be a convenient way to expose a ",(0,o.kt)("inlineCode",{parentName:"p"},"Configuration")," object\ncreated by reading a JSON file."),(0,o.kt)("p",null,"Creating the configuration would be done with your typical async/await\nsyntax, but inside the provider.\nUsing Flutter's asset system, this would be:"),(0,o.kt)(a.Z,{mdxType:"CodeBlock"},(0,s.m)("// ignore_for_file: avoid_unused_constructor_parameters\n\nimport 'dart:convert';\n\nimport 'package:flutter/services.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\nclass Configuration {\n  Configuration.fromJson(Map<String, Object?> json);\n\n  final String host = '';\n}\n\n/* SNIPPET START */\n\nfinal configProvider = FutureProvider<Configuration>((ref) async {\n  final content = json.decode(\n    await rootBundle.loadString('assets/configurations.json'),\n  ) as Map<String, Object?>;\n\n  return Configuration.fromJson(content);\n});\n")),(0,o.kt)("p",null,"Then, the UI can listen to configurations like so:"),(0,o.kt)(a.Z,{mdxType:"CodeBlock"},(0,s.m)("// ignore_for_file: omit_local_variable_types, prefer_final_locals\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\nimport 'config_provider.dart';\n\n/* SNIPPET START */\n\nWidget build(BuildContext context, WidgetRef ref) {\n  AsyncValue<Configuration> config = ref.watch(configProvider);\n\n  return config.when(\n    loading: () => const CircularProgressIndicator(),\n    error: (err, stack) => Text('Error: $err'),\n    data: (config) {\n      return Text(config.host);\n    },\n  );\n}\n")),(0,o.kt)("p",null,"This will automatically rebuild the UI when the ",(0,o.kt)("a",{parentName:"p",href:"https://api.dart.dev/dart-async/Future-class.html"},"Future")," completes.\nAt the same time, if multiple widgets want the configurations,\nthe asset will be decoded only once."),(0,o.kt)("p",null,"As you can see, listening to a ",(0,o.kt)("inlineCode",{parentName:"p"},"FutureProvider")," inside a widget returns\nan ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/AsyncValue-class.html"},"AsyncValue")," \u2013 which allows handling the error/loading states."))}m.isMDXComponent=!0}}]);