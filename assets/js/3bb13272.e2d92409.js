"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[320],{1239:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=(n(6396),n(8215),n(9055)),d=n(4214),s=["components"],l={title:"Reading a Provider"},p=void 0,u={unversionedId:"concepts/reading",id:"concepts/reading",title:"Reading a Provider",description:"p\xe1gina n\xe3o traduzida, ainda.",source:"@site/i18n/pt-BR/docusaurus-plugin-content-docs/current/concepts/reading.mdx",sourceDirName:"concepts",slug:"/concepts/reading",permalink:"/docs/concepts/reading",editUrl:"https://github.com/rrousselGit/river_pod/edit/master/website/i18n/pt-BR/docusaurus-plugin-content-docs/current/concepts/reading.mdx",tags:[],version:"current",frontMatter:{title:"Reading a Provider"},sidebar:"Sidebar",previous:{title:"Providers",permalink:"/docs/concepts/providers"},next:{title:"Combining Provider States",permalink:"/docs/concepts/combining_providers"}},c=[{value:"Obtaining a &quot;ref&quot; object",id:"obtaining-a-ref-object",children:[{value:"Obtaining a &quot;ref&quot; from a provider",id:"obtaining-a-ref-from-a-provider",children:[],level:3},{value:"Obtaining a &quot;ref&quot; from a widget",id:"obtaining-a-ref-from-a-widget",children:[{value:"Extending ConsumerWidget instead of StatelessWidget",id:"extending-consumerwidget-instead-of-statelesswidget",children:[],level:4},{value:"Extending ConsumerStatefulWidget+ConsumerState instead of StatefulWidget+State",id:"extending-consumerstatefulwidgetconsumerstate-instead-of-statefulwidgetstate",children:[],level:4},{value:"Extending HookConsumerWidget instead of HookWidget",id:"extending-hookconsumerwidget-instead-of-hookwidget",children:[],level:4},{value:"Extending StatefulHookConsumerWidget instead of HookWidget",id:"extending-statefulhookconsumerwidget-instead-of-hookwidget",children:[],level:4},{value:"Consumer and HookConsumer widgets",id:"consumer-and-hookconsumer-widgets",children:[],level:4}],level:3}],level:2},{value:"Using ref to interact with providers",id:"using-ref-to-interact-with-providers",children:[{value:"Using ref.watch to observe a provider",id:"using-refwatch-to-observe-a-provider",children:[],level:3},{value:"Using ref.listen to react to a provider change",id:"using-reflisten-to-react-to-a-provider-change",children:[],level:3},{value:"Using ref.read to obtain the state of a provider",id:"using-refread-to-obtain-the-state-of-a-provider",children:[{value:"<strong>DON&#39;T</strong> use <code>ref.read</code> inside the build method",id:"dont-use-refread-inside-the-build-method",children:[],level:4}],level:3}],level:2},{value:"Deciding what to read",id:"deciding-what-to-read",children:[],level:2},{value:"Using &quot;select&quot; to filter rebuilds",id:"using-select-to-filter-rebuilds",children:[],level:2}],m={toc:c};function h(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"p\xe1gina n\xe3o traduzida, ainda."),(0,i.kt)("p",null,"Before reading this guide, make sure to ",(0,i.kt)("a",{parentName:"p",href:"/docs/concepts/providers"},"read about Providers")," first."),(0,i.kt)("p",null,"In this guide, we will see how to consume a provider."),(0,i.kt)("h2",{id:"obtaining-a-ref-object"},'Obtaining a "ref" object'),(0,i.kt)("p",null,'First and foremost, before reading a provider, we need to obtain a "ref" object.'),(0,i.kt)("p",null,"This object is what allows us to interact with providers, be it from a widget\nor another provider."),(0,i.kt)("h3",{id:"obtaining-a-ref-from-a-provider"},'Obtaining a "ref" from a provider'),(0,i.kt)("p",null,'All providers receive a "ref" as a parameter:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"final provider = Provider((ref) {\n  // use ref to obtain other providers\n  final repository = ref.watch(repositoryProvider);\n\n  return SomeValue(repository);\n})\n")),(0,i.kt)("p",null,"This parameter is safe to pass to the value exposed by the provider."),(0,i.kt)("p",null,'For example, a common use-case is to pass the provider\'s "ref" to a ',(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/state_notifier/latest/state_notifier/StateNotifier-class.html"},"StateNotifier"),":"),(0,i.kt)(o.Z,{mdxType:"CodeBlock"},(0,d.m)("import 'package:riverpod/riverpod.dart';\n\nfinal repositoryProvider = Provider((ref) => Repository());\n\nclass Repository {\n  Future<void> post(String url) async {}\n}\n\n/* SNIPPET START */\n\nfinal counterProvider = StateNotifierProvider<Counter, int>((ref) {\n  return Counter(ref);\n});\n\nclass Counter extends StateNotifier<int> {\n  Counter(this.ref): super(0);\n\n  final Ref ref;\n\n  void increment() {\n    // Counter can use the \"ref\" to read other providers\n    final repository = ref.read(repositoryProvider);\n    repository.post('...');\n  }\n}")),(0,i.kt)("p",null,"Doing so allows our ",(0,i.kt)("inlineCode",{parentName:"p"},"Counter")," class to read providers."),(0,i.kt)("h3",{id:"obtaining-a-ref-from-a-widget"},'Obtaining a "ref" from a widget'),(0,i.kt)("p",null,"Widgets naturally do not have a ref parameter. But ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/rrousselgit/river_pod"},"Riverpod")," offers multiple\nsolutions to obtain one from widgets."),(0,i.kt)("h4",{id:"extending-consumerwidget-instead-of-statelesswidget"},"Extending ConsumerWidget instead of StatelessWidget"),(0,i.kt)("p",null,"The most common way to obtain a ref in the widget tree is\nto replace ",(0,i.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/StatelessWidget-class.html"},"StatelessWidget")," with ",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ConsumerWidget-class.html"},"ConsumerWidget"),"."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ConsumerWidget-class.html"},"ConsumerWidget")," is identical in use to ",(0,i.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/StatelessWidget-class.html"},"StatelessWidget"),', with the only\ndifference being that it has an extra parameter on its build method: the "ref" object.'),(0,i.kt)("p",null,"A typical ",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ConsumerWidget-class.html"},"ConsumerWidget")," looks like:"),(0,i.kt)(o.Z,{mdxType:"CodeBlock"},(0,d.m)("import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'reading_counter.dart';\n\n/* SNIPPET START */\n\nclass HomeView extends ConsumerWidget {\n  const HomeView({Key? key}): super(key: key);\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    // use ref to listen to a provider\n    final counter = ref.watch(counterProvider);\n    return Text('$counter');\n  }\n}\n")),(0,i.kt)("h4",{id:"extending-consumerstatefulwidgetconsumerstate-instead-of-statefulwidgetstate"},"Extending ConsumerStatefulWidget+ConsumerState instead of StatefulWidget+State"),(0,i.kt)("p",null,"Similar to ",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ConsumerWidget-class.html"},"ConsumerWidget"),", ",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ConsumerState-class.html"},"ConsumerStatefulWidget")," and ",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ConsumerStatefulWidget-class.html"},"ConsumerState")," are the equivalent of a\n",(0,i.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/StatefulWidget-class.html"},"StatefulWidget")," with its ",(0,i.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/State-class.html"},"State"),', with the difference that the state has a "ref" object.'),(0,i.kt)("p",null,'This time, the "ref" isn\'t passed as parameter of the build method, but is\na property of the ',(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ConsumerStatefulWidget-class.html"},"ConsumerState")," object:"),(0,i.kt)(o.Z,{mdxType:"CodeBlock"},(0,d.m)("import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'reading_counter.dart';\n\n/* SNIPPET START */\n\nclass HomeView extends ConsumerStatefulWidget {\n  const HomeView({Key? key}): super(key: key);\n\n  @override\n  HomeViewState createState() => HomeViewState();\n}\n\nclass HomeViewState extends ConsumerState<HomeView> {\n  @override\n  void initState() {\n    super.initState();\n    // \"ref\" can be used in all life-cycles of a StatefulWidget.\n    ref.read(counterProvider);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // We can also use \"ref\" to listen to a provider inside the build method\n    final counter = ref.watch(counterProvider);\n    return Text('$counter');\n  }\n}")),(0,i.kt)("h4",{id:"extending-hookconsumerwidget-instead-of-hookwidget"},"Extending HookConsumerWidget instead of HookWidget"),(0,i.kt)("p",null,"This option is for ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/rrousselGit/flutter_hooks"},"flutter_hooks")," users. Since ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/rrousselGit/flutter_hooks"},"flutter_hooks")," requires\nextending ",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_hooks/latest/flutter_hooks/HookWidget-class.html"},"HookWidget")," to work, widgets that use hooks are unable to extend\n",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ConsumerWidget-class.html"},"ConsumerWidget"),"."),(0,i.kt)("p",null,"The package ",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/packages/hooks_riverpod"},"hooks_riverpod")," exposes a new widget called ",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/hooks_riverpod/latest/hooks_riverpod/HookConsumerWidget-class.html"},"HookConsumerWidget"),".\n",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/hooks_riverpod/latest/hooks_riverpod/HookConsumerWidget-class.html"},"HookConsumerWidget")," acts as both a ",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ConsumerWidget-class.html"},"ConsumerWidget")," and a ",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_hooks/latest/flutter_hooks/HookWidget-class.html"},"HookWidget"),". This\nallows a widget to both listen to providers and use hooks."),(0,i.kt)("p",null,"An example would be:"),(0,i.kt)(o.Z,{mdxType:"CodeBlock"},(0,d.m)("// ignore_for_file: unused_local_variable\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_hooks/flutter_hooks.dart';\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\nimport 'reading_counter.dart';\n\n/* SNIPPET START */\n\nclass HomeView extends HookConsumerWidget {\n  const HomeView({Key? key}): super(key: key);\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    // HookConsumerWidget allows using hooks inside the build method\n    final state = useState(0);\n\n    // We can also use the ref parameter to listen to providers.\n    final counter = ref.watch(counterProvider);\n    return Text('$counter');\n  }\n}")),(0,i.kt)("h4",{id:"extending-statefulhookconsumerwidget-instead-of-hookwidget"},"Extending StatefulHookConsumerWidget instead of HookWidget"),(0,i.kt)("p",null,"This option is for ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/rrousselGit/flutter_hooks"},"flutter_hooks")," users, who need to use ",(0,i.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/StatefulWidget-class.html"},"StatefulWidget")," lifecycle methods in addition to hooks."),(0,i.kt)("p",null,"An example would be:"),(0,i.kt)(o.Z,{mdxType:"CodeBlock"},(0,d.m)("// ignore_for_file: unused_local_variable\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_hooks/flutter_hooks.dart';\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\nimport 'reading_counter.dart';\n\n/* SNIPPET START */\n\nclass HomeView extends StatefulHookConsumerWidget {\n  const HomeView({Key? key}) : super(key: key);\n\n  @override\n  HomeViewState createState() => HomeViewState();\n}\n\nclass HomeViewState extends ConsumerState<HomeView> {\n  @override\n  void initState() {\n    super.initState();\n    // \"ref\" can be used in all life-cycles of a StatefulWidget.\n    ref.read(counterProvider);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // Like HookConsumerWidget, we can use hooks inside the builder\n    final state = useState(0);\n\n    // We can also use \"ref\" to listen to a provider inside the build method\n    final counter = ref.watch(counterProvider);\n    return Text('$counter');\n  }\n}\n")),(0,i.kt)("h4",{id:"consumer-and-hookconsumer-widgets"},"Consumer and HookConsumer widgets"),(0,i.kt)("p",null,'A final way to obtain a "ref" inside widgets is to rely on ',(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/Consumer-class.html"},"Consumer"),"/\n",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/hooks_riverpod/latest/hooks_riverpod/HookConsumer-class.html"},"HookConsumer"),"."),(0,i.kt)("p",null,'These classes are widgets that can be used to obtain a "ref" in a builder callback, with the same\nproperties as ',(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ConsumerWidget-class.html"},"ConsumerWidget"),"/",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/hooks_riverpod/latest/hooks_riverpod/HookConsumerWidget-class.html"},"HookConsumerWidget"),"."),(0,i.kt)("p",null,'As such, these widgets are a way to obtain a "ref" without having to define a class.\nAn example would be:'),(0,i.kt)(o.Z,{mdxType:"CodeBlock"},(0,d.m)("// ignore_for_file: unused_local_variable\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_hooks/flutter_hooks.dart';\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\nimport 'reading_counter.dart';\n\n\nclass HomeView extends HookConsumerWidget {\n  const HomeView({Key? key}): super(key: key);\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\nreturn \n/* SNIPPET START */\nScaffold(\n  body: HookConsumer(\n    builder: (context, ref, child) {\n      // Like HookConsumerWidget, we can use hooks inside the builder\n      final state = useState(0);\n\n      // We can also use the ref parameter to listen to providers.\n      final counter = ref.watch(counterProvider);\n      return Text('$counter');\n    },\n  ),\n);\n/* SNIPPET END */\n  }\n}")),(0,i.kt)("h2",{id:"using-ref-to-interact-with-providers"},"Using ref to interact with providers"),(0,i.kt)("p",null,'Now that we have a "ref", we can start using it.'),(0,i.kt)("p",null,'There are three primary usages for "ref":'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"obtaining the value of a provider and listening to changes, such that when\nthis value changes, this will rebuild the widget or provider that subscribed\nto the value.\nThis is done using ",(0,i.kt)("inlineCode",{parentName:"li"},"ref.watch")),(0,i.kt)("li",{parentName:"ul"},"adding a listener on a provider, to execute an action such as navigating to a new\npage or showing a modal whenever that provider changes.",(0,i.kt)("br",{parentName:"li"}),"This is done using ",(0,i.kt)("inlineCode",{parentName:"li"},"ref.listen"),"."),(0,i.kt)("li",{parentName:"ul"},'obtaining the value of a provider while ignoring changes.\nThis is useful when we need the value of a provider in an event\nsuch as "on click".\nThis is done using ',(0,i.kt)("inlineCode",{parentName:"li"},"ref.read"),".")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Whenever possible, prefer using ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.watch")," over ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.read")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.listen")," to\nimplement a feature.",(0,i.kt)("br",{parentName:"p"}),"\n","By relying on ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.watch"),", your application becomes both reactive\nand declarative, which makes it more maintainable."))),(0,i.kt)("h3",{id:"using-refwatch-to-observe-a-provider"},"Using ref.watch to observe a provider"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ref.watch")," is used inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," method of a widget or\ninside the body of a provider to have the widget/provider listen to a provider:"),(0,i.kt)("p",null,"For example, a provider could use ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.watch")," to combine multiple providers\ninto a new value."),(0,i.kt)("p",null,"An example would be filtering a todo-list.\nWe could have two providers:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filterTypeProvider"),", a provider that exposes the current type of filter\n(none, show only completed tasks, ...)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"todosProvider"),", a provider that exposes the entire list of tasks")),(0,i.kt)("p",null,"And by using ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.watch"),", we could make a third provider that combines both providers to\ncreate a filtered list of tasks:"),(0,i.kt)(o.Z,{mdxType:"CodeBlock"},(0,d.m)("// ignore_for_file: omit_local_variable_types\n\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\nenum FilterType {\n  none,\n  completed,\n}\n\nabstract class Todo {\n  bool get isCompleted;\n}\n\nclass TodoList extends StateNotifier<List<Todo>> {\n  TodoList(): super([]);\n}\n\n/* SNIPPET START */\n\nfinal filterTypeProvider = StateProvider<FilterType>((ref) => FilterType.none);\nfinal todosProvider = StateNotifierProvider<TodoList, List<Todo>>((ref) => TodoList());\n\nfinal filteredTodoListProvider = Provider((ref) {\n  // obtains both the filter and the list of todos\n  final FilterType filter = ref.watch(filterTypeProvider);\n  final List<Todo> todos = ref.watch(todosProvider);\n\n  switch (filter) {\n    case FilterType.completed:\n      // return the completed list of todos\n      return todos.where((todo) => todo.isCompleted).toList();\n    case FilterType.none:\n      // returns the unfiltered list of todos\n      return todos;\n  }\n});")),(0,i.kt)("p",null,"With this code, ",(0,i.kt)("inlineCode",{parentName:"p"},"filteredTodoListProvider")," now exposes the filtered list of tasks."),(0,i.kt)("p",null,"The filtered list will also automatically update if either the filter or the list of tasks\nchanged. At the same time, the filtered list will not be recomputed if\nneither the filter nor the list of tasks changed."),(0,i.kt)("p",null,"Similarly, a widget can use ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.watch")," to show\nthe content from a provider and update the user interface whenever that content changes:"),(0,i.kt)(o.Z,{mdxType:"CodeBlock"},(0,d.m)("// ignore_for_file: omit_local_variable_types\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\nenum FilterType {\n  none,\n  completed,\n}\n\nabstract class Todo {\n  bool get isCompleted;\n}\n\nclass TodoList extends StateNotifier<List<Todo>> {\n  TodoList(): super([]);\n}\n\n/* SNIPPET START */\n\nfinal counterProvider = StateProvider((ref) => 0);\n\nclass HomeView extends ConsumerWidget {\n  const HomeView({Key? key}): super(key: key);\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    // use ref to listen to a provider\n    final counter = ref.watch(counterProvider);\n\n    return Text('$counter');\n  }\n}")),(0,i.kt)("p",null,"This snippet shows a widget that listens to a provider which stores a ",(0,i.kt)("inlineCode",{parentName:"p"},"count"),".\nAnd if that ",(0,i.kt)("inlineCode",{parentName:"p"},"count")," changes, the widget will rebuild and the UI will update\nto show the new value."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"watch")," method should not be called asynchronously,\nlike inside an ",(0,i.kt)("inlineCode",{parentName:"p"},"onPressed")," of an ",(0,i.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/material/ElevatedButton-class.html"},"ElevatedButton"),". Nor should it be used\ninside ",(0,i.kt)("inlineCode",{parentName:"p"},"initState")," and other ",(0,i.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/State-class.html"},"State")," life-cycles."),(0,i.kt)("p",{parentName:"div"},"In those cases, consider using ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.read")," instead."))),(0,i.kt)("h3",{id:"using-reflisten-to-react-to-a-provider-change"},"Using ref.listen to react to a provider change"),(0,i.kt)("p",null,"Similarly to ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.watch"),", it is possible to use ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.listen")," to observe a provider."),(0,i.kt)("p",null,"The main difference between them is that, rather than rebuilding the widget/provider\nif the listened to provider changes, using ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.listen")," will instead call a custom function."),(0,i.kt)("p",null,"That can be useful for performing actions when a certain change happens, such\nas showing a snackbar when an error happens."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.listen")," method needs 2 positional arguments, the first one is the Provider and the second one is the callback function that we want to execute when the state changes.\nThe callback function when called will be passed 2 values, the value of the previous State and the value of the new State."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.listen")," method can be used inside the body of a provider:"),(0,i.kt)(o.Z,{mdxType:"CodeBlock"},(0,d.m)("// ignore_for_file: omit_local_variable_types, avoid_types_on_closure_parameters, avoid_print\n\nimport 'package:riverpod/riverpod.dart';\nimport 'reading_counter.dart';\n\n/* SNIPPET START */\n\nfinal counterProvider = StateNotifierProvider<Counter, int>((ref) => Counter(ref));\n\nfinal anotherProvider = Provider((ref) {\n  ref.listen<int>(counterProvider, (int? previousCount, int newCount) {\n    print('The counter changed $newCount');\n  });\n  // ...\n});")),(0,i.kt)("p",null,"or inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," method of a widget:"),(0,i.kt)(o.Z,{mdxType:"CodeBlock"},(0,d.m)("// ignore_for_file: omit_local_variable_types, avoid_types_on_closure_parameters, avoid_print\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'reading_counter.dart';\n\n/* SNIPPET START */\n\nfinal counterProvider = StateNotifierProvider<Counter, int>((ref) => Counter(ref));\n\nclass HomeView extends ConsumerWidget {\n  const HomeView({Key? key}): super(key: key);\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    ref.listen<int>(counterProvider, (int? previousCount, int newCount) {\n      print('The counter changed $newCount');\n    });\n    \n    return Container();\n  }\n}")),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"listen")," method should not be called asynchronously,\nlike inside an ",(0,i.kt)("inlineCode",{parentName:"p"},"onPressed")," of an ",(0,i.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/material/ElevatedButton-class.html"},"ElevatedButton"),". Nor should it be used\ninside ",(0,i.kt)("inlineCode",{parentName:"p"},"initState")," and other ",(0,i.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/State-class.html"},"State")," life-cycles."))),(0,i.kt)("h3",{id:"using-refread-to-obtain-the-state-of-a-provider"},"Using ref.read to obtain the state of a provider"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.read")," method is a way to obtain the state of a provider without listening to it."),(0,i.kt)("p",null,"It is commonly used inside functions triggered by user interactions.\nFor example, we can use ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.read")," to increment a counter when a user clicks a button:"),(0,i.kt)(o.Z,{mdxType:"CodeBlock"},(0,d.m)("// ignore_for_file: omit_local_variable_types\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\nimport 'reading_counter.dart';\n\n/* SNIPPET START */\n\nfinal counterProvider = StateNotifierProvider<Counter, int>((ref) => Counter(ref));\n\nclass HomeView extends ConsumerWidget {\n  const HomeView({Key? key}): super(key: key);\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    return Scaffold(\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          // Call `increment()` on the `Counter` class\n          ref.read(counterProvider.notifier).increment();\n        },\n      ),\n    );\n  }\n}")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Using ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.read")," should be avoided as much as possible because it is not reactive."),(0,i.kt)("p",{parentName:"div"},"It exists for cases where using ",(0,i.kt)("inlineCode",{parentName:"p"},"watch")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"listen")," would cause issues.\nIf you can, it is almost always better to use ",(0,i.kt)("inlineCode",{parentName:"p"},"watch"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"listen"),", especially ",(0,i.kt)("inlineCode",{parentName:"p"},"watch"),"."))),(0,i.kt)("h4",{id:"dont-use-refread-inside-the-build-method"},(0,i.kt)("strong",{parentName:"h4"},"DON'T")," use ",(0,i.kt)("inlineCode",{parentName:"h4"},"ref.read")," inside the build method"),(0,i.kt)("p",null,"You might be tempted to use ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.read")," to optimize the performance of a widget\nby doing:"),(0,i.kt)(o.Z,{mdxType:"CodeBlock"},(0,d.m)("// ignore_for_file: omit_local_variable_types\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\n/* SNIPPET START */\n\nfinal counterProvider = StateProvider((ref) => 0);\n\nWidget build(BuildContext context, WidgetRef ref) {\n  // use \"read\" to ignore updates on a provider\n  final counter = ref.read(counterProvider.notifier);\n  return ElevatedButton(\n    onPressed: () => counter.state++,\n    child: const Text('button'),\n  );\n}")),(0,i.kt)("p",null,"But this is a very bad practice and can cause bugs that are difficult to track."),(0,i.kt)("p",null,"Using ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.read")," this way is commonly associated with the thought \"The value\nexposed by a provider never changes so using 'ref.read' is safe\". The problem\nwith this assumption is that, while today that provider may indeed never update\nits value, there is no guarantee that tomorrow will be the same."),(0,i.kt)("p",null,"Software tends to change a lot, and it is likely that in the future, a value\nthat previously never changed will need to change.",(0,i.kt)("br",{parentName:"p"}),"\n","If you use ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.read"),", when that value needs to change, you have\nto go through your entire codebase to change ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.read")," into ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.watch")," \u2013\nwhich is error prone and you are likely to forget some cases."),(0,i.kt)("p",null,"If you use ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.watch")," to begin with, you will have fewer problems when refactoring."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"But I wanted to use ",(0,i.kt)("inlineCode",{parentName:"em"},"ref.read")," to reduce the number of times my widget rebuilds"))),(0,i.kt)("p",null,"While the goal is commendable, it is important to note that you can achieve the\nexact same effect (reducing the number of builds) using ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.watch")," instead."),(0,i.kt)("p",null,"Providers offer various ways to obtain a value while reducing the number of\nrebuilds, which you could use instead."),(0,i.kt)("p",null,"For example instead of"),(0,i.kt)(o.Z,{mdxType:"CodeBlock"},(0,d.m)("// ignore_for_file: omit_local_variable_types, prefer_final_locals\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\n/* SNIPPET START */\n\nfinal counterProvider = StateProvider((ref) => 0);\n\nWidget build(BuildContext context, WidgetRef ref) {\n  StateController<int> counter = ref.read(counterProvider.notifier);\n  return ElevatedButton(\n    onPressed: () => counter.state++,\n    child: const Text('button'),\n  );\n}")),(0,i.kt)("p",null,"we could do:"),(0,i.kt)(o.Z,{mdxType:"CodeBlock"},(0,d.m)("// ignore_for_file: omit_local_variable_types, prefer_final_locals\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\n/* SNIPPET START */\n\nfinal counterProvider = StateProvider((ref) => 0);\n\nWidget build(BuildContext context, WidgetRef ref) {\n  StateController<int> counter = ref.watch(counterProvider.notifier);\n  return ElevatedButton(\n    onPressed: () => counter.state++,\n    child: const Text('button'),\n  );\n}\n")),(0,i.kt)("p",null,"Both snippets achieve the same effect: our button will not rebuild when the\ncounter increments."),(0,i.kt)("p",null,"On the other hand, the second approach supports cases where the counter is reset.\nFor example, another part of the application could call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"ref.refresh(counterProvider);\n")),(0,i.kt)("p",null,"which would recreate the ",(0,i.kt)("inlineCode",{parentName:"p"},"StateController")," object."),(0,i.kt)("p",null,"If we used ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.read")," here, our button would still use the previous\n",(0,i.kt)("inlineCode",{parentName:"p"},"StateController")," instance, which was disposed and should no-longer be used.",(0,i.kt)("br",{parentName:"p"}),"\n","Whereas using ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.watch")," correctly rebuilds the button to use the new ",(0,i.kt)("inlineCode",{parentName:"p"},"StateController"),"."),(0,i.kt)("h2",{id:"deciding-what-to-read"},"Deciding what to read"),(0,i.kt)("p",null,"Depending on the provider you want to listen to, you may have multiple possible\nvalues that you can listen to."),(0,i.kt)("p",null,"As an example, consider the following ",(0,i.kt)("a",{parentName:"p",href:"../providers/stream_provider"},"StreamProvider"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"final userProvider = StreamProvider<User>(...);\n")),(0,i.kt)("p",null,"When reading this ",(0,i.kt)("inlineCode",{parentName:"p"},"userProvider"),", you can:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"synchronously read the current state by listening to ",(0,i.kt)("inlineCode",{parentName:"p"},"userProvider")," itself:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"Widget build(BuildContext context, WidgetRef ref) {\n  AsyncValue<User> user = ref.watch(userProvider);\n\n  return user.when(\n    loading: () => const CircularProgressIndicator(),\n    error: (error, stack) => const Text('Oops'),\n    data: (user) => Text(user.name),\n  );\n}\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"obtain the associated ",(0,i.kt)("a",{parentName:"p",href:"https://api.dart.dev/stable/2.13.4/dart-async/Stream-class.html"},"Stream"),", by listening to ",(0,i.kt)("inlineCode",{parentName:"p"},"userProvider.stream"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"Widget build(BuildContext context, WidgetRef ref) {\n  Stream<User> user = ref.watch(userProvider.stream);\n}\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"obtain a ",(0,i.kt)("a",{parentName:"p",href:"https://api.dart.dev/stable/2.13.4/dart-async/Future-class.html"},"Future")," that resolves with the latest value emitted, by listening to ",(0,i.kt)("inlineCode",{parentName:"p"},"userProvider.future"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"Widget build(BuildContext context, WidgetRef ref) {\n  Future<User> user = ref.watch(userProvider.future);\n}\n")))),(0,i.kt)("p",null,"Other providers may offer different alternative values.",(0,i.kt)("br",{parentName:"p"}),"\n","For more information, refer to the documentation of each provider by\nconsulting the ",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/riverpod-library.html"},"API reference"),"."),(0,i.kt)("h2",{id:"using-select-to-filter-rebuilds"},'Using "select" to filter rebuilds'),(0,i.kt)("p",null,"One final feature to mention related to reading providers is the ability to\nreduce the number of times a widget/provider rebuilds from ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.watch"),", or how often ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.listen"),"\nexecutes a function."),(0,i.kt)("p",null,"This is important to keep in mind as, by default, listening to a provider\nlistens to the entire object state. But sometimes, a widget/provider may only\ncare about changes to some properties instead of the whole object."),(0,i.kt)("p",null,"For example, a provider may expose a ",(0,i.kt)("inlineCode",{parentName:"p"},"User"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"abstract class User {\n  String get name;\n  int get age;\n}\n")),(0,i.kt)("p",null,"But a widget may only use the user name:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"Widget build(BuildContext context, WidgetRef ref) {\n  User user = ref.watch(userProvider);\n  return Text(user.name);\n}\n")),(0,i.kt)("p",null,"If we naively used ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.watch"),", this would rebuild the widget when the user's\n",(0,i.kt)("inlineCode",{parentName:"p"},"age")," changes."),(0,i.kt)("p",null,"The solution is to use ",(0,i.kt)("inlineCode",{parentName:"p"},"select")," to explicitly tell Riverpod that we only\nwant to listen to the name property of the ",(0,i.kt)("inlineCode",{parentName:"p"},"User"),"."),(0,i.kt)("p",null,"The updated code would be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"Widget build(BuildContext context, WidgetRef ref) {\n  String name = ref.watch(userProvider.select((user) => user.name));\n  return Text(name);\n}\n")),(0,i.kt)("p",null,"By using ",(0,i.kt)("inlineCode",{parentName:"p"},"select"),", we are able to specify a function\nthat returns the property that we care about."),(0,i.kt)("p",null,"Whenever the ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," changes, Riverpod will call this function and\ncompare the previous and new result. If they are different (such as when the name\nchanged), Riverpod will rebuild the widget.",(0,i.kt)("br",{parentName:"p"}),"\n","However, if they are equal (such as when the age changed), Riverpod will not\nrebuild the widget."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"It is also possible to use ",(0,i.kt)("inlineCode",{parentName:"p"},"select")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"ref.listen"),":"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"ref.listen<String>(\n  userProvider.select((user) => user.name),\n  (String? previousName, String newName) {\n    print('The user name changed $newName');\n  }\n);\n")),(0,i.kt)("p",{parentName:"div"},"Doing so will call the listener only when the name changes."))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You don't have to return a property of the object. Any value that\noverrides == will work. For example you could do:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"final label = ref.watch(userProvider.select((user) => 'Mr ${user.name}'));\n")))))}h.isMDXComponent=!0}}]);