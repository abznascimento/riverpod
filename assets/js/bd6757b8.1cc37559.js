"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[461],{4411:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),a=(r(6396),r(8215),r(9055)),d=r(4214),p=["components"],l={title:"StateProvider"},s=void 0,u={unversionedId:"providers/state_provider",id:"providers/state_provider",title:"StateProvider",description:"p\xe1gina n\xe3o traduzida, ainda.",source:"@site/i18n/pt-BR/docusaurus-plugin-content-docs/current/providers/state_provider.mdx",sourceDirName:"providers",slug:"/providers/state_provider",permalink:"/riverpod/docs/providers/state_provider",editUrl:"https://github.com/rrousselGit/river_pod/edit/master/website/i18n/pt-BR/docusaurus-plugin-content-docs/current/providers/state_provider.mdx",tags:[],version:"current",frontMatter:{title:"StateProvider"},sidebar:"Sidebar",previous:{title:"StreamProvider",permalink:"/riverpod/docs/providers/stream_provider"},next:{title:"ChangeNotifierProvider",permalink:"/riverpod/docs/providers/change_notifier_provider"}},c=[{value:"Usage example: Changing the filter type using a dropdown",id:"usage-example-changing-the-filter-type-using-a-dropdown",children:[],level:2},{value:"How to update the state based on the previous value without reading the provider twice",id:"how-to-update-the-state-based-on-the-previous-value-without-reading-the-provider-twice",children:[],level:2}],h={toc:c};function m(e){var t=e.components,r=(0,o.Z)(e,p);return(0,i.kt)("wrapper",(0,n.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"p\xe1gina n\xe3o traduzida, ainda."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"StateProvider")," is a provider that exposes a way to modify its state.\nIt is a simplification of ",(0,i.kt)("a",{parentName:"p",href:"./state_notifier_provider"},"StateNotifierProvider"),", designed to avoid\nhaving to write a ",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/state_notifier/latest/state_notifier/StateNotifier-class.html"},"StateNotifier")," class for very simple use-cases."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"StateProvider")," exists primarily to allow the modification of\n",(0,i.kt)("strong",{parentName:"p"},"simple")," variables by the User Interface.",(0,i.kt)("br",{parentName:"p"}),"\n","The state of a ",(0,i.kt)("inlineCode",{parentName:"p"},"StateProvider")," is typically one of:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"an enum, such as a filter type"),(0,i.kt)("li",{parentName:"ul"},"a String, typically the raw content of a text field"),(0,i.kt)("li",{parentName:"ul"},"a boolean, for checkboxes"),(0,i.kt)("li",{parentName:"ul"},"a number, for pagination or age form fields")),(0,i.kt)("p",null,"You should not use ",(0,i.kt)("inlineCode",{parentName:"p"},"StateProvider")," if:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"your state needs validation logic"),(0,i.kt)("li",{parentName:"ul"},"your state is a complex object (such as a custom class, a list/map, ...)"),(0,i.kt)("li",{parentName:"ul"},"the logic for modifying your state is more advanced than a simple ",(0,i.kt)("inlineCode",{parentName:"li"},"count++"),".")),(0,i.kt)("p",null,"For more advanced cases, consider using ",(0,i.kt)("a",{parentName:"p",href:"./state_notifier_provider"},"StateNotifierProvider")," instead and\ncreate a ",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/state_notifier/latest/state_notifier/StateNotifier-class.html"},"StateNotifier")," class.",(0,i.kt)("br",{parentName:"p"}),"\n","While the initial boilerplate will be a bit larger, having a custom\n",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/state_notifier/latest/state_notifier/StateNotifier-class.html"},"StateNotifier")," class is critical for the long-term maintainability of your\nproject \u2013 as it centralizes the business logic of your state in a single place."),(0,i.kt)("h2",{id:"usage-example-changing-the-filter-type-using-a-dropdown"},"Usage example: Changing the filter type using a dropdown"),(0,i.kt)("p",null,"A real-world use-case of ",(0,i.kt)("inlineCode",{parentName:"p"},"StateProvider")," would be to manage the state of\nsimple form components like dropdowns/text fields/checkboxes.",(0,i.kt)("br",{parentName:"p"}),"\n","In particular, we will see how to use ",(0,i.kt)("inlineCode",{parentName:"p"},"StateProvider")," to implement a dropdown\nthat allows changing how a list of products is sorted."),(0,i.kt)("p",null,"For the sake of simplicity, the list of products that we will obtain\nwill be built directly in the application and will be as follows:"),(0,i.kt)(a.Z,{mdxType:"CodeBlock"},(0,d.m)("import 'package:riverpod/riverpod.dart';\n\n/* SNIPPET START */\n\nclass Product {\n  Product({required this.name, required this.price});\n\n  final String name;\n  final double price;\n}\n\nfinal _products = [\n  Product(name: 'iPhone', price: 999),\n  Product(name: 'cookie', price: 2),\n  Product(name: 'ps5', price: 500),\n];\n\nfinal productsProvider = Provider<List<Product>>((ref) {\n  return _products;\n});\n")),(0,i.kt)("p",null,"In a real-world application, this list would typically be obtained using\n",(0,i.kt)("a",{parentName:"p",href:"./future_provider"},"FutureProvider")," by making a network request."),(0,i.kt)("p",null,"The User Interface could then show the list of products by doing:"),(0,i.kt)(a.Z,{mdxType:"CodeBlock"},(0,d.m)("import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\nimport 'product.dart';\n\n/* SNIPPET START */\n\nWidget build(BuildContext context, WidgetRef ref) {\n  final products = ref.watch(productsProvider);\n  return Scaffold(\n    body: ListView.builder(\n      itemCount: products.length,\n      itemBuilder: (context, index) {\n        final product = products[index];\n        return ListTile(\n          title: Text(product.name),\n          subtitle: Text('${product.price} \\$'),\n        );\n      },\n    ),\n  );\n}\n")),(0,i.kt)("p",null,"Now that we're done with the base, we can add a dropdown, which will\nallow filtering our products either by price or by name.",(0,i.kt)("br",{parentName:"p"}),"\n","For that, we will use ",(0,i.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/material/DropdownButton-class.html"},"DropDownButton"),"."),(0,i.kt)(a.Z,{mdxType:"CodeBlock"},(0,d.m)("// ignore_for_file: unused_local_variable\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\nimport 'full.dart';\n\n/* SNIPPET START */\n\n// An enum representing the filter type\nenum ProductSortType {\n  name,\n  price,\n}\n\nWidget build(BuildContext context, WidgetRef ref) {\n  final products = ref.watch(productsProvider);\n  return Scaffold(\n    appBar: AppBar(\n      title: const Text('Products'),\n      actions: [\n        DropdownButton<ProductSortType>(\n          value: ProductSortType.price,\n          onChanged: (value) {},\n          items: const [\n            DropdownMenuItem(\n              value: ProductSortType.name,\n              child: Icon(Icons.sort_by_alpha),\n            ),\n            DropdownMenuItem(\n              value: ProductSortType.price,\n              child: Icon(Icons.sort),\n            ),\n          ],\n        ),\n      ],\n    ),\n    body: ListView.builder(\n      // ... /* SKIP */\n      itemBuilder: (c, i) => Container(), /* SKIP END */\n    ),\n  );\n}\n")),(0,i.kt)("p",null,"Now that we have a dropdown, let's create a ",(0,i.kt)("inlineCode",{parentName:"p"},"StateProvider")," and\nsynchronize the state of the dropdown with our provider."),(0,i.kt)("p",null,"First, let's create the ",(0,i.kt)("inlineCode",{parentName:"p"},"StateProvider"),":"),(0,i.kt)(a.Z,{mdxType:"CodeBlock"},(0,d.m)("import 'package:flutter_riverpod/flutter_riverpod.dart';\n\nimport 'dropdown.dart';\n\n/* SNIPPET START */\n\nfinal productSortTypeProvider = StateProvider<ProductSortType>(\n  // We return the default sort type, here name.\n  (ref) => ProductSortType.name,\n);\n")),(0,i.kt)("p",null,"Then, we can connect this provider with our dropdown by doing:"),(0,i.kt)(a.Z,{mdxType:"CodeBlock"},(0,d.m)("// ignore_for_file: prefer_const_literals_to_create_immutables\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\nimport 'dropdown.dart';\nimport 'sort_provider.dart';\n\nWidget build(BuildContext context, WidgetRef ref) {\n  return AppBar(actions: [\n/* SNIPPET START */\nDropdownButton<ProductSortType>(\n  // When the sort type changes, this will rebuild the dropdown\n  // to update the icon shown.\n  value: ref.watch(productSortTypeProvider),\n  // When the user interacts with the dropdown, we update the provider state.\n  onChanged: (value) =>\n      ref.read(productSortTypeProvider.notifier).state = value!,\n  items: [\n    // ...\n  ],\n),\n/* SNIPPET END */\n  ]);\n}\n")),(0,i.kt)("p",null,"With this, we should now be able to change the sort type.",(0,i.kt)("br",{parentName:"p"}),"\n","It has no impact on the list of products yet though! It's now time for the\nfinal part: Updating our ",(0,i.kt)("inlineCode",{parentName:"p"},"productsProvider")," to sort the list of products."),(0,i.kt)("p",null,"A key component of implementing this is to use ",(0,i.kt)("a",{parentName:"p",href:"../concepts/reading#using-refwatch-to-observe-a-provider"},"ref.watch"),", to have\nour ",(0,i.kt)("inlineCode",{parentName:"p"},"productsProvider")," obtain the sort type and recompute the list of\nproducts whenever the sort type changes."),(0,i.kt)("p",null,"The implementation would be:"),(0,i.kt)(a.Z,{mdxType:"CodeBlock"},(0,d.m)("import 'package:collection/collection.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\nimport 'dropdown.dart';\nimport 'product.dart';\nimport 'sort_provider.dart';\n\nfinal _products = [\n  Product(name: 'iPhone', price: 999),\n  Product(name: 'cookie', price: 2),\n  Product(name: 'ps5', price: 500),\n];\n\n/* SNIPPET START */\n\nfinal productsProvider = Provider<List<Product>>((ref) {\n  final sortType = ref.watch(productSortTypeProvider);\n  switch (sortType) {\n    case ProductSortType.name:\n      return _products.sorted((a, b) => a.name.compareTo(b.name));\n    case ProductSortType.price:\n      return _products.sorted((a, b) => a.price.compareTo(b.price));\n  }\n});")),(0,i.kt)("p",null,"That's all! This change is enough for the User Interface to automatically\nre-render the list of products when the sort type changes."),(0,i.kt)("p",null,"Here is the complete example on Dartpad:"),(0,i.kt)("iframe",{src:"https://dartpad.dev/embed-flutter.html?gh_owner=rrousselGit&gh_repo=river_pod&gh_path=website%2Fdocs%2Fproviders%2Fstate_provider",style:{border:0,width:"100%",aspectRatio:"2/1.5"}}),(0,i.kt)("h2",{id:"how-to-update-the-state-based-on-the-previous-value-without-reading-the-provider-twice"},"How to update the state based on the previous value without reading the provider twice"),(0,i.kt)("p",null,"Sometimes, you want to update the state of a ",(0,i.kt)("inlineCode",{parentName:"p"},"StateProvider")," based on the previous value.\nNaturally, you may end-up writing:"),(0,i.kt)(a.Z,{mdxType:"CodeBlock"},(0,d.m)("import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\n/* SNIPPET START */\n\nfinal counterProvider = StateProvider<int>((ref) => 0);\n\nclass HomeView extends ConsumerWidget {\n  const HomeView({Key? key}): super(key: key);\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    return Scaffold(\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          // We're updating the state from the previous value, we ended-up reading\n          // the provider twice!\n          ref.read(counterProvider.notifier).state = ref.read(counterProvider.notifier).state + 1;\n        },\n      ),\n    );\n  }\n}")),(0,i.kt)("p",null,"While there's nothing particularly wrong with this snippet, the syntax is a bit inconvenient."),(0,i.kt)("p",null,"To make the syntax a bit better, we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"update")," function.\nThis function will take a callback that will receive the current state and is expected\nto return the new state.",(0,i.kt)("br",{parentName:"p"}),"\n","We can use it to refactor our previous code to:"),(0,i.kt)(a.Z,{mdxType:"CodeBlock"},(0,d.m)("import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\n/* SNIPPET START */\n\nfinal counterProvider = StateProvider<int>((ref) => 0);\n\nclass HomeView extends ConsumerWidget {\n  const HomeView({Key? key}): super(key: key);\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    return Scaffold(\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          /* highlight-start */\n          ref.read(counterProvider.notifier).update((state) => state + 1);\n          /* highlight-end */\n        },\n      ),\n    );\n  }\n}")),(0,i.kt)("p",null,"This change achieves the same effect while making the syntax a bit better."))}m.isMDXComponent=!0}}]);