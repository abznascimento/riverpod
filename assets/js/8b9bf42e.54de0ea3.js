"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[62],{5298:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return p}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={},l=void 0,u={unversionedId:"cookbooks/search_as_we_type",id:"cookbooks/search_as_we_type",title:"search_as_we_type",description:"p\xe1gina n\xe3o traduzida, ainda.",source:"@site/i18n/pt-BR/docusaurus-plugin-content-docs/current/cookbooks/search_as_we_type.mdx",sourceDirName:"cookbooks",slug:"/cookbooks/search_as_we_type",permalink:"/riverpod/docs/cookbooks/search_as_we_type",editUrl:"https://github.com/rrousselGit/river_pod/edit/master/website/i18n/pt-BR/docusaurus-plugin-content-docs/current/cookbooks/search_as_we_type.mdx",tags:[],version:"current",frontMatter:{}},c=[{value:"Usage example: &quot;Search as we type&quot; searchbar",id:"usage-example-search-as-we-type-searchbar",children:[],level:2}],d={toc:c};function p(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"p\xe1gina n\xe3o traduzida, ainda."),(0,i.kt)("p",null,"A real world example could be to use ",(0,i.kt)("inlineCode",{parentName:"p"},"FutureProvider")," to implement a searchbar."),(0,i.kt)("h2",{id:"usage-example-search-as-we-type-searchbar"},'Usage example: "Search as we type" searchbar'),(0,i.kt)("p",null,'Implementing a "search as we type" can seem daunting at first when using\nconventional means.',(0,i.kt)("br",{parentName:"p"}),"\n","There are lots of moving parts, such as:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"handling errors."),(0,i.kt)("li",{parentName:"ul"},"debouncing the user input to avoid making network requests on every keystroke."),(0,i.kt)("li",{parentName:"ul"},"cancelling previously pending network requests when the search field changes.")),(0,i.kt)("p",null,"But the combination of ",(0,i.kt)("inlineCode",{parentName:"p"},"FutureProvider")," and the power of ","[ref.watch]"," can\nsignificantly simplify this task."),(0,i.kt)("p",null,"A common pattern wanting to perform an asynchronous requests\nis to split it into multiple providers:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a ","[StateNotifierProvider]"," or ",(0,i.kt)("inlineCode",{parentName:"li"},"StateProvider")," for the parameters of your request\n(or alternatively use ","[family]",")"),(0,i.kt)("li",{parentName:"ul"},"a ",(0,i.kt)("inlineCode",{parentName:"li"},"FutureProvider"),", which will do the request by reading the parameters from\nthe other providers/","[family]",".")),(0,i.kt)("p",null,"The first step would be to store the user input somewhere. For this example,\nwe will use ",(0,i.kt)("inlineCode",{parentName:"p"},"StateProvider")," (as the search state is only a single ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"final searchInputProvider = StateProvider<String>((ref) => '');\n")),(0,i.kt)("p",null,"We can then connect this provider to a ","[TextField]"," by doing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"Consumer(\n  builder: (context, ref, child) {\n    return TextField(\n      onChanged: (value) => ref.read(searchInputProvider.notifier).state = value,\n    );\n  },\n)\n")),(0,i.kt)("p",null,"Then, we can create our ",(0,i.kt)("inlineCode",{parentName:"p"},"FutureProvider")," which will take care of the request:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"final searchProvider = FutureProvider<\n\n\n\x3c!--\n// Copyright (c) 2019, the Dart project authors.  Please see the AUTHORS file\n// for details. All rights reserved. Use of this source code is governed by a\n// BSD-style license that can be found in the LICENSE file.\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:http/http.dart' as http;\nimport 'dart:convert';\n\nfinal searchFieldProvider = StateProvider<String>((ref) => '');\nfinal questionsProvider = FutureProvider<List>((ref) async {\n  final client = http.Client();\n  ref.onDispose(client.close);\n\n  final search = ref.watch(searchFieldProvider);\n\n  Uri uri;\n\n  if (search.isEmpty) {\n    uri = Uri.parse(\n      'https://api.stackexchange.com/2.3/questions?order=desc&sort=activity&site=stackoverflow',\n    );\n  } else {\n    final encodedQuery = Uri.encodeComponent(search);\n    uri = Uri.parse(\n      'https://api.stackexchange.com/2.3/search?order=desc&sort=activity&intitle=$encodedQuery&site=stackoverflow',\n    );\n  }\n\n  final response = await client.get(uri);\n  final questions = jsonDecode(response.body);\n\n  return questions['items'].map((question) => question['title']).toList();\n});\n\nvoid main() => runApp(const ProviderScope(child: MyApp()));\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(home: MyHomePage());\n  }\n}\n\nclass MyHomePage extends ConsumerWidget {\n  const MyHomePage({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final questions = ref.watch(questionsProvider);\n\n    return Scaffold(\n      appBar: AppBar(title: const Text('Questions')),\n      body: Column(\n        children: [\n          TextField(\n            onChanged: (value) =>\n                ref.read(searchFieldProvider.notifier).state = value,\n          ),\n          Expanded(\n            child: questions.when(\n              loading: () => const Center(child: CircularProgressIndicator()),\n              error: (error, stack) => Center(child: Text('Error $error')),\n              data: (questions) {\n                return ListView.builder(\n                  itemCount: questions.length,\n                  itemBuilder: (context, index) {\n                    final question = questions[index];\n\n                    return ListTile(\n                      title: Text(\n                        question.toString(),\n                      ),\n                    );\n                  },\n                );\n              },\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n")))}p.isMDXComponent=!0}}]);