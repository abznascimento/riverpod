"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[861],{2958:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return l},default:function(){return c}});var r=a(7462),i=a(3366),n=(a(7294),a(3905)),o=(a(4214),["components"]),s={title:"Providers"},d=void 0,p={unversionedId:"concepts/providers",id:"concepts/providers",title:"Providers",description:"p\xe1gina n\xe3o traduzida, ainda.",source:"@site/i18n/pt-BR/docusaurus-plugin-content-docs/current/concepts/providers.mdx",sourceDirName:"concepts",slug:"/concepts/providers",permalink:"/docs/concepts/providers",editUrl:"https://github.com/rrousselGit/river_pod/edit/master/website/i18n/pt-BR/docusaurus-plugin-content-docs/current/concepts/providers.mdx",tags:[],version:"current",frontMatter:{title:"Providers"},sidebar:"Sidebar",previous:{title:"Primeiros passos",permalink:"/docs/getting_started"},next:{title:"Reading a Provider",permalink:"/docs/concepts/reading"}},l=[{value:"Why use providers?",id:"why-use-providers",children:[],level:2},{value:"Creating a provider",id:"creating-a-provider",children:[],level:2},{value:"Different Types of Providers",id:"different-types-of-providers",children:[],level:2},{value:"Provider Modifiers",id:"provider-modifiers",children:[],level:2}],m={toc:l};function c(e){var t=e.components,a=(0,i.Z)(e,o);return(0,n.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"p\xe1gina n\xe3o traduzida, ainda."),(0,n.kt)("p",null,"Now that we have installed ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/rrousselgit/river_pod"},"Riverpod"),', let\'s talk about "providers".'),(0,n.kt)("p",null,"Providers are the most important part of a ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/rrousselgit/river_pod"},"Riverpod")," application.\nA provider is an object that encapsulates a piece of state and allows listening\nto that state."),(0,n.kt)("h2",{id:"why-use-providers"},"Why use providers?"),(0,n.kt)("p",null,"Wrapping a piece of state in a provider:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Allows easily accessing that state in multiple locations.\nProviders are a complete replacement for patterns like Singletons,\nService Locators, Dependency Injection or InheritedWidgets.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Simplifies combining this state with others.\nEver struggled to merge multiple objects into one? This scenario is built\ndirectly inside providers.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Enables performance optimizations.\nWhether for filtering widget rebuilds or for caching expensive state computations;\nproviders ensure that only what is impacted by a state change is recomputed.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Increases the testability of your application.\nWith providers, you do not need complex ",(0,n.kt)("inlineCode",{parentName:"p"},"setUp"),"/",(0,n.kt)("inlineCode",{parentName:"p"},"tearDown")," steps. Furthermore,\nany provider can be overridden to behave differently during a test, which\nallows easily testing a very specific behavior.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Allows easy integration with advanced features, such as logging or\npull-to-refresh."))),(0,n.kt)("h2",{id:"creating-a-provider"},"Creating a provider"),(0,n.kt)("p",null,"Providers come in many variants, but they all work the same way."),(0,n.kt)("p",null,"The most common usage is to declare them as global constants like so:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"final myProvider = Provider((ref) {\n  return MyValue();\n});\n")),(0,n.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("p",{parentName:"div"},"Do not be frightened by the global aspect of providers.\nProviders are fully immutable. Declaring a provider is no different from declaring\na function, and providers are testable and maintainable."))),(0,n.kt)("p",null,"This snippet consists of three components:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"final myProvider"),", the declaration of a variable.\nThis variable is what we will use in the future to read the state of our provider.\nProviders should always be ",(0,n.kt)("inlineCode",{parentName:"p"},"final"),".")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"Provider"),", the provider that we decided to use.\n",(0,n.kt)("a",{parentName:"p",href:"/docs/providers/provider"},"Provider")," is the most basic of all providers. It exposes an object that never\nchanges.\nWe could replace ",(0,n.kt)("a",{parentName:"p",href:"/docs/providers/provider"},"Provider")," with other providers like ",(0,n.kt)("a",{parentName:"p",href:"/docs/providers/stream_provider"},"StreamProvider")," or\n",(0,n.kt)("a",{parentName:"p",href:"/docs/providers/state_notifier_provider"},"StateNotifierProvider"),", to change how the value is interacted with.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"A function that creates the shared state.\nThat function will always receive an object called ",(0,n.kt)("inlineCode",{parentName:"p"},"ref")," as a parameter. This object\nallows us to read other providers, perform some operations when the state\nof our provider will be destroyed, and much more."))),(0,n.kt)("p",null,"The type of the object returned by the function passed to a provider depends on\nthe provider used.\nFor example, the function of a ",(0,n.kt)("a",{parentName:"p",href:"/docs/providers/provider"},"Provider")," can create any object.\nOn the other hand, ",(0,n.kt)("a",{parentName:"p",href:"/docs/providers/stream_provider"},"StreamProvider"),"'s callback will be expected to return a ",(0,n.kt)("a",{parentName:"p",href:"https://api.dart.dev/stable/2.8.4/dart-async/Stream-class.html"},"Stream"),"."),(0,n.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("p",{parentName:"div"},"You can declare as many providers as you want without limitations.\nAs opposed to when using ",(0,n.kt)("inlineCode",{parentName:"p"},"package:provider"),", ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/rrousselgit/river_pod"},"Riverpod"),' allows creating multiple\nproviders exposing a state of the same "type":'),(0,n.kt)("pre",{parentName:"div"},(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"final cityProvider = Provider((ref) => 'London');\nfinal countryProvider = Provider((ref) => 'England');\n")),(0,n.kt)("p",{parentName:"div"},"The fact that both providers create a ",(0,n.kt)("inlineCode",{parentName:"p"},"String")," does not cause any problem."))),(0,n.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("p",{parentName:"div"},"For providers to work, you must add ",(0,n.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ProviderScope-class.html"},"ProviderScope")," at the root of your\nFlutter applications:"),(0,n.kt)("pre",{parentName:"div"},(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"void main() {\n  runApp(ProviderScope(child: MyApp()));\n}\n")))),(0,n.kt)("h2",{id:"different-types-of-providers"},"Different Types of Providers"),(0,n.kt)("p",null,"There are multiple types of providers for multiple different use cases."),(0,n.kt)("p",null,"With all of these providers available, it is sometimes difficult to understand when to use one provider type over another.\nUse the table below to choose a provider that fits what you want to provide to the widget tree."),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Provider Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Provider Create Function"),(0,n.kt)("th",{parentName:"tr",align:null},"Example Use Case"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/providers/provider"},"Provider")),(0,n.kt)("td",{parentName:"tr",align:null},"Returns any type"),(0,n.kt)("td",{parentName:"tr",align:null},"A service class / computed property (filtered list)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/providers/state_provider"},"StateProvider")),(0,n.kt)("td",{parentName:"tr",align:null},"Returns any type"),(0,n.kt)("td",{parentName:"tr",align:null},"A filter condition / simple state object")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/providers/future_provider"},"FutureProvider")),(0,n.kt)("td",{parentName:"tr",align:null},"Returns a Future of any type"),(0,n.kt)("td",{parentName:"tr",align:null},"A result from an API call")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/providers/stream_provider"},"StreamProvider")),(0,n.kt)("td",{parentName:"tr",align:null},"Returns a Stream of any type"),(0,n.kt)("td",{parentName:"tr",align:null},"A stream of results from an API")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/providers/state_notifier_provider"},"StateNotifierProvider")),(0,n.kt)("td",{parentName:"tr",align:null},"Returns a subclass of StateNotifier"),(0,n.kt)("td",{parentName:"tr",align:null},"A complex state object that is immutable except through an interface")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ChangeNotifierProvider-class.html"},"ChangeNotifierProvider")),(0,n.kt)("td",{parentName:"tr",align:null},"Returns a subclass of ChangeNotifier"),(0,n.kt)("td",{parentName:"tr",align:null},"A complex state object that requires mutability")))),(0,n.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("p",{parentName:"div"},"While all providers have their purpose, ",(0,n.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ChangeNotifierProvider-class.html"},"ChangeNotifierProvider"),"s are not recommended for scalable applications,\nbecause of issues with mutable state.\nIt exists in the ",(0,n.kt)("inlineCode",{parentName:"p"},"flutter_riverpod")," package to provide an easy migration path from ",(0,n.kt)("inlineCode",{parentName:"p"},"package:provider"),", and allows\nfor some flutter specific use-cases such as integration with some Navigator 2 packages."))),(0,n.kt)("h2",{id:"provider-modifiers"},"Provider Modifiers"),(0,n.kt)("p",null,"All Providers have a built-in way to add extra functionalities to your different providers."),(0,n.kt)("p",null,"They may add new features to the ",(0,n.kt)("inlineCode",{parentName:"p"},"ref")," object or change slightly how the provider\nis consumed.\nModifiers can be used on all providers, with a syntax similar to named constructor:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"final myAutoDisposeProvider = StateProvider.autoDispose<int>((ref) => 0);\nfinal myFamilyProvider = Provider.family<String, int>((ref, id) => '$id');\n")),(0,n.kt)("p",null,"At the moment, there are two modifiers available:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/concepts/modifiers/auto_dispose"},(0,n.kt)("inlineCode",{parentName:"a"},".autoDispose")),", which will make the provider automatically destroy its state\nwhen it is no longer being listened to."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/concepts/modifiers/family"},(0,n.kt)("inlineCode",{parentName:"a"},".family")),", which allows creating a provider from external parameters.")),(0,n.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("p",{parentName:"div"},"A provider can use multiple modifiers at once:"),(0,n.kt)("pre",{parentName:"div"},(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"final userProvider = FutureProvider.autoDispose.family<User, int>((ref, userId) async {\n  return fetchUser(userId);\n});\n")))),(0,n.kt)("p",null,"That's it for this guide!"),(0,n.kt)("p",null,"You can continue with ",(0,n.kt)("a",{parentName:"p",href:"/docs/concepts/reading"},"How to read a provider"),".\nAlternatively, you can see ",(0,n.kt)("a",{parentName:"p",href:"/docs/concepts/combining_providers"},"How to combine providers"),"."))}c.isMDXComponent=!0}}]);