"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[733],{9834:function(t,e,o){o.r(e),o.d(e,{contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var i=o(7462),n=o(3366),r=(o(7294),o(3905)),a=(o(6396),o(8215),o(9055)),s=o(4214),d=["components"],l={title:"StateNotifierProvider"},p=void 0,c={unversionedId:"providers/state_notifier_provider",id:"providers/state_notifier_provider",title:"StateNotifierProvider",description:"p\xe1gina n\xe3o traduzida, ainda.",source:"@site/i18n/pt-BR/docusaurus-plugin-content-docs/current/providers/state_notifier_provider.mdx",sourceDirName:"providers",slug:"/providers/state_notifier_provider",permalink:"/docs/providers/state_notifier_provider",editUrl:"https://github.com/rrousselGit/river_pod/edit/master/website/i18n/pt-BR/docusaurus-plugin-content-docs/current/providers/state_notifier_provider.mdx",tags:[],version:"current",frontMatter:{title:"StateNotifierProvider"},sidebar:"Sidebar",previous:{title:"Provider",permalink:"/docs/providers/provider"},next:{title:"FutureProvider",permalink:"/docs/providers/future_provider"}},u=[],m={toc:u};function f(t){var e=t.components,o=(0,n.Z)(t,d);return(0,r.kt)("wrapper",(0,i.Z)({},m,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"p\xe1gina n\xe3o traduzida, ainda."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"StateNotifierProvider")," is a provider that is used to listen to and expose a\n",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/state_notifier/latest/state_notifier/StateNotifier-class.html"},"StateNotifier")," (from the package ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/packages/state_notifier"},"state_notifier"),", which Riverpod re-exports).",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"StateNotifierProvider")," along with ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/state_notifier/latest/state_notifier/StateNotifier-class.html"},"StateNotifier")," is Riverpod's recommended solution\nfor managing state which may change in reaction to a user interaction."),(0,r.kt)("p",null,"It is typically used for:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"exposing an ",(0,r.kt)("strong",{parentName:"li"},"immutable")," state which can change over time after reacting to\ncustom events."),(0,r.kt)("li",{parentName:"ul"},'centralizing the logic for modifying some state (aka "business logic") in a\nsingle place, improving maintainability over time.')),(0,r.kt)("p",null,"As a usage example, we could use ",(0,r.kt)("inlineCode",{parentName:"p"},"StateNotifierProvider")," to implement a todo-list.\nDoing so would allow us to expose methods such as ",(0,r.kt)("inlineCode",{parentName:"p"},"addTodo")," to let the UI\nmodify the list of todos on user interactions:"),(0,r.kt)(a.Z,{mdxType:"CodeBlock"},(0,s.m)("import 'package:flutter/foundation.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\n/* SNIPPET START */\n\n// The state of our StateNotifier should be immutable.\n// We could also use packages like Freezed to help with the implementation.\n@immutable\nclass Todo {\n  const Todo({required this.id, required this.description, required this.completed});\n\n  // All properties should be `final` on our class.\n  final String id;\n  final String description;\n  final bool completed;\n\n  // Since Todo is immutable, we implement a method that allows cloning the\n  // Todo with slightly different content.\n  Todo copyWith({String? id, String? description, bool? completed}) {\n    return Todo(\n      id: id ?? this.id,\n      description: description ?? this.description,\n      completed: completed ?? this.completed,\n    );\n  }\n}\n\n// The StateNotifier class that will be passed to our StateNotifierProvider.\n// This class should not expose state outside of its \"state\" property, which means\n// no public getters/properties!\n// The public methods on this class will be what allow the UI to modify the state.\nclass TodosNotifier extends StateNotifier<List<Todo>> {\n  // We initialize the list of todos to an empty list\n  TodosNotifier(): super([]);\n\n  // Let's allow the UI to add todos.\n  void addTodo(Todo todo) {\n    // Since our state is immutable, we are not allowed to do `state.add(todo)`.\n    // Instead, we should create a new list of todos which contains the previous\n    // items and the new one.\n    // Using Dart's spread operator here is helpful!\n    state = [...state, todo];\n    // No need to call \"notifyListeners\" or anything similar. Calling \"state =\"\n    // will automatically rebuild the UI when necessary.\n  }\n\n  // Let's allow removing todos\n  void removeTodo(String todoId) {\n    // Again, our state is immutable. So we're making a new list instead of\n    // changing the existing list.\n    state = [\n      for (final todo in state)\n        if (todo.id != todoId) todo,\n    ];\n  }\n\n  // Let's mark a todo as completed\n  void toggle(String todoId) {\n    state = [\n      for (final todo in state)\n        // we're marking only the matching todo as completed\n        if (todo.id == todoId)\n          // Once more, since our state is immutable, we need to make a copy\n          // of the todo. We're using our `copyWith` method implemented before\n          // to help with that.\n          todo.copyWith(completed: !todo.completed)\n        else\n          // other todos are not modified\n          todo,\n    ];\n  }\n}\n\n// Finally, we are using StateNotifierProvider to allow the UI to interact with\n// our TodosNotifier class.\nfinal todosProvider = StateNotifierProvider<TodosNotifier, List<Todo>>((ref) {\n  return TodosNotifier();\n});")),(0,r.kt)("p",null,"Now that we have defined a ",(0,r.kt)("inlineCode",{parentName:"p"},"StateNotifierProvider"),", we can use it to interact\nwith the list of todos in our UI:"),(0,r.kt)(a.Z,{mdxType:"CodeBlock"},(0,s.m)("// ignore_for_file: omit_local_variable_types, prefer_final_locals\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\nimport 'todos.dart';\n\n/* SNIPPET START */\n\nclass TodoListView extends ConsumerWidget {\n  const TodoListView({Key? key}): super(key: key);\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    // rebuild the widget when the todo list changes\n    List<Todo> todos = ref.watch(todosProvider);\n\n    // Let's render the todos in a scrollable list view\n    return ListView(\n      children: [\n        for (final todo in todos)\n          CheckboxListTile(\n            value: todo.completed,\n            // When tapping on the todo, change its completed status\n            onChanged: (value) => ref.read(todosProvider.notifier).toggle(todo.id),\n            title: Text(todo.description),\n          ),\n      ],\n    );\n  }\n}")))}f.isMDXComponent=!0}}]);