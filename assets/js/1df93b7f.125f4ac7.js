"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[237],{2612:function(e,t,r){r.r(t),r.d(t,{default:function(){return f}});var n=r(7462),i=r(7294),o=r(2263),a=r(2582),l=r(9960),s=r(5999),d=r(4996),c=r(4214),m=function(){var e=(0,o.Z)().siteConfig;return i.createElement("header",{className:"banner"},i.createElement("div",{className:"banner__content"},i.createElement("h1",{className:"banner__logo"},i.createElement("img",{src:"img/logo.svg",alt:"Riverpod"}),e.title),i.createElement("h1",{className:"banner__headline"},i.createElement(s.Z,{id:"home.tagline"},"A Reactive Caching and Data-binding Framework")),i.createElement("div",null,i.createElement(l.Z,{className:"banner__cta",to:(0,d.Z)("docs/getting_started")},i.createElement(s.Z,{id:"home.get_started"},"Get Started")))),i.createElement("div",{className:"banner__content"},i.createElement(c.O,{title:(0,s.I)({id:"home.create_provider",message:"Create a Provider"}),snippet:"// ignore_for_file: use_key_in_widget_constructors\n\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\n/* SNIPPET START */\n\nfinal counterProvider = StateNotifierProvider<Counter, int>((ref) {\n  return Counter();\n});\n\nclass Counter extends StateNotifier<int> {\n  Counter() : super(0);\n  void increment() => state++;\n}\n"}),i.createElement(c.O,{title:(0,s.I)({id:"home.consume_provider",message:"Consume the Provider"}),snippet:"// ignore_for_file: use_key_in_widget_constructors\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\nfinal counterProvider = StateProvider<int>((ref) => 0);\n\n/* SNIPPET START */\n\nclass Home extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final count = ref.watch(counterProvider);\n    return Text('$count');\n  }\n}\n"})))},u=function(e){var t=e.title,r=e.description,n=e.snippet,o=e.imageUrl,a=e.direction,l=void 0===a?"normal":a;return i.createElement("div",{className:"feature__card feature__card--"+l},i.createElement("div",{className:"feature__content"},i.createElement("h1",null,t),i.createElement("p",null,r)),i.createElement("div",{className:"feature__space"}),i.createElement("div",{className:"feature__preview"},o?i.createElement("img",{src:o,alt:t}):i.createElement(c.O,{snippet:n})))},p=function(e){var t=e.imageUrl,r=e.title,n=e.description;return i.createElement("div",{className:"highlight"},i.createElement("img",{className:"highlight__illustration",src:t,alt:r}),i.createElement("h2",{className:"highlight__title"},r),i.createElement("p",{className:"highlight__description"},n))},g=[{snippet:"// ignore_for_file: use_key_in_widget_constructors\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\n/* SNIPPET START */\n\n// A shared state that can be accessed by multiple\n// objects at the same time\nfinal countProvider = StateProvider((ref) => 0);\n\n// Consumes the shared state and rebuild when it changes\nclass Title extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final count = ref.watch(countProvider);\n    return Text('$count');\n  }\n}\n",title:(0,s.I)({id:"home.shared_state_title",message:"Declare shared state from anywhere"}),description:i.createElement(s.Z,{id:"home.shared_state_body",description:"The homepage input placeholder",values:{main:i.createElement("code",null,"main.dart"),br:i.createElement("br",null)}},"No need to jump between your {main} and your UI files\n          anymore. {br}\n          Place the code of your shared state where it belongs, be\n          it in a separate package or right next to the Widget that\n          needs it, without losing testability.")},{snippet:"import 'package:flutter_riverpod/flutter_riverpod.dart';\n\nabstract class Todo {\n  bool get completed;\n}\n\nenum Filter {\n  all,\n  completed,\n  uncompleted,\n}\n\n/* SNIPPET START */\n\nfinal todosProvider = StateProvider<List<Todo>>((ref) => []);\nfinal filterProvider = StateProvider<Filter>((ref) => Filter.all);\n\nfinal filteredTodosProvider = Provider<List<Todo>>((ref) {\n  final todos = ref.watch(todosProvider);\n  switch (ref.watch(filterProvider)) {\n    case Filter.all:\n      return todos;\n    case Filter.completed:\n      return todos.where((todo) => todo.completed).toList();\n    case Filter.uncompleted:\n      return todos.where((todo) => !todo.completed).toList();\n  }\n});\n",title:(0,s.I)({id:"home.recompute_title",message:"Recompute states/rebuild UI only when needed"}),description:i.createElement(s.Z,{id:"home.recompute_body",values:{br:i.createElement("br",null),Provider:i.createElement("code",null,i.createElement("a",{href:"./docs/concepts/combining_providers"},"Provider")),families:i.createElement("a",{href:"./docs/concepts/modifiers/family"},'"families"'),build:i.createElement("code",null,"build"),truly:i.createElement("strong",null,"truly")}},"We no longer have to sort/filter lists inside the {build}\n          method or have to resort to advanced cache mechanism. {br} {br}\n          With {Provider} and {families}, sort your lists or do HTTP\n          requests only when you {truly} need it.")},{snippet:"// Parse a file without having to deal with errors\n// ignore_for_file: avoid_unused_constructor_parameters, use_key_in_widget_constructors\n\nimport 'dart:convert';\nimport 'dart:io';\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\nclass Configuration {\n  Configuration.fromJson(Object? json);\n\n  String get host => throw UnimplementedError();\n}\n\n/* SNIPPET START */\n\nfinal configurationsProvider = FutureProvider<Configuration>((ref) async {\n  final uri = Uri.parse('configs.json');\n  final rawJson = await File.fromUri(uri).readAsString();\n\n  return Configuration.fromJson(json.decode(rawJson));\n});\n\nclass Example extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final configs = ref.watch(configurationsProvider);\n\n    // Use Riverpod's built-in support\n    // for error/loading states using \"when\":\n    return configs.when(\n      loading: () => const CircularProgressIndicator(),\n      error: (err, stack) => Text('Error $err'),\n      data: (configs) => Text('data: ${configs.host}'),\n    );\n  }\n}\n",title:(0,s.I)({id:"home.safe_read_title",message:"Safely read providers"}),description:i.createElement(s.Z,{id:"home.safe_read_body",values:{br:i.createElement("br",null)}},"Reading a provider will never result in a bad state. If you\n          can write the code needed to read a provider, you will obtain\n          a valid value. {br} {br}\n          This even applies to asynchronously loaded values. As opposed\n          to with provider, Riverpod allows cleanly handling\n          loading/error cases.")},{imageUrl:"img/intro/devtool.png",title:(0,s.I)({id:"home.devtool_title",message:" Inspect your state in the devtool"}),description:i.createElement(s.Z,{id:"home.devtool_body",values:{br:i.createElement("br",null)}},"Using Riverpod, your state is visible out of the box inside Flutter's devtool. {br}\n          Furthermore, a full-blown state-inspector is in progress.")}],h=[{imageUrl:"img/highlights/compile.svg",title:(0,s.I)({id:"homepage.compile_safe_title",message:"Compile safe"}),description:i.createElement(s.Z,{id:"homepage.compile_safe_body",values:{ProviderNotFound:i.createElement("code",null,"ProviderNotFoundException")}},"No more {ProviderNotFound} or forgetting to handle loading\n          states. Using Riverpod, if your code compiles, it works.")},{imageUrl:"img/highlights/provider.svg",title:(0,s.I)({id:"homepage.unlimited_provider_title",message:"Provider, without its limitations"}),description:i.createElement(s.Z,{id:"homepage.unlimited_provider_body"},"Riverpod is inspired by Provider but solves some of it's key issues such as supporting multiple providers of the same type; awaiting asynchronous providers; adding providers from anywhere, ...")},{imageUrl:"img/highlights/flutter.svg",title:(0,s.I)({id:"homepage.no_flutter_dependency_title",message:"Doesn't depend on Flutter"}),description:i.createElement(s.Z,{id:"homepage.no_flutter_dependency_body",values:{BuildContext:i.createElement("code",null,"BuildContext")}},"Create/share/tests providers, with no dependency on Flutter. This\n          includes being able to listen to providers without a\n          {BuildContext}.")}];function f(){var e=(0,o.Z)().siteConfig;return i.createElement(a.Z,{title:e.tagline,description:"A boilerplate-free and safe way to share state"},i.createElement(m,null),i.createElement("main",null,i.createElement("section",null,i.createElement("div",{className:"highlight__container"},h.map((function(e,t){return i.createElement(p,(0,n.Z)({key:"highlight-"+t},e))})))),i.createElement("section",null,g.map((function(e,t){return i.createElement(u,(0,n.Z)({key:"feature-"+t},e,{direction:t%2==0?"normal":"reverse"}))})))))}}}]);