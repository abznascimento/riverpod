"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[951],{8744:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return v}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),a=r(9055),d=r(4214),s=["components"],p={title:"ProviderObserver"},l=void 0,c={unversionedId:"concepts/provider_observer",id:"concepts/provider_observer",title:"ProviderObserver",description:"p\xe1gina n\xe3o traduzida, ainda.",source:"@site/i18n/pt-BR/docusaurus-plugin-content-docs/current/concepts/provider_observer.mdx",sourceDirName:"concepts",slug:"/concepts/provider_observer",permalink:"/docs/concepts/provider_observer",editUrl:"https://github.com/rrousselGit/river_pod/edit/master/website/i18n/pt-BR/docusaurus-plugin-content-docs/current/concepts/provider_observer.mdx",tags:[],version:"current",frontMatter:{title:"ProviderObserver"},sidebar:"Sidebar",previous:{title:".autoDispose",permalink:"/docs/concepts/modifiers/auto_dispose"},next:{title:"Testing",permalink:"/docs/cookbooks/testing"}},v=[{value:"Usage :",id:"usage-",children:[],level:3}],u={toc:v};function m(e){var t=e.components,r=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"p\xe1gina n\xe3o traduzida, ainda."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/ProviderObserver-class.html"},"ProviderObserver")," listens to the changes of a ProviderContainer."),(0,i.kt)("p",null,"To use it, extend the class ProviderObserver and override the method you want to use."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/ProviderObserver-class.html"},"ProviderObserver")," has three methods :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"didAddProvider")," is called every time a provider was initialized, and the value exposed is ",(0,i.kt)("inlineCode",{parentName:"li"},"value"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"didDisposeProvider")," is called every time a provider was disposed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"didUpdateProvider")," is called every time by providers when they emit a notification.")),(0,i.kt)("h3",{id:"usage-"},"Usage :"),(0,i.kt)("p",null,"A simple use case for ",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/ProviderObserver-class.html"},"ProviderObserver")," is to log the changes in providers by overriding the ",(0,i.kt)("inlineCode",{parentName:"p"},"didUpdateProvider")," method."),(0,i.kt)(a.Z,{mdxType:"CodeBlock"},(0,d.m)("// ignore_for_file: use_key_in_widget_constructors, avoid_print\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\n/* SNIPPET START */\n\n// A Counter example implemented with riverpod with Logger\n\nclass Logger extends ProviderObserver {\n  @override\n  void didUpdateProvider(\n    ProviderBase provider,\n    Object? previousValue,\n    Object? newValue,\n    ProviderContainer container,\n  ) {\n    print('''\n{\n  \"provider\": \"${provider.name ?? provider.runtimeType}\",\n  \"newValue\": \"$newValue\"\n}''');\n  }\n}\n\nvoid main() {\n  runApp(\n    // Adding ProviderScope enables Riverpod for the entire project\n    // Adding our Logger to the list of observers\n    ProviderScope(observers: [Logger()], child: const MyApp()),\n  );\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(home: Home());\n  }\n}\n\nfinal counterProvider = StateProvider((ref) => 0, name: 'counter');\n\nclass Home extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final count = ref.watch(counterProvider);\n\n    return Scaffold(\n      appBar: AppBar(title: const Text('Counter example')),\n      body: Center(\n        child: Text('$count'),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () => ref.read(counterProvider.notifier).state++,\n        child: const Icon(Icons.add),\n      ),\n    );\n  }\n}")),(0,i.kt)("p",null,"Now, every time the value of our provider is updated, the logger will log it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'I/flutter (16783): {\nI/flutter (16783):   "provider": "counter",\nI/flutter (16783):   "newValue": "1"\nI/flutter (16783): }\n')),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),":")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"For states that are mutable such as ",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/StateController-class.html"},"StateController")," (the state of ",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/StateProvider/state.html"},"StateProvider.state"),") and\n",(0,i.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/foundation/ChangeNotifier-class.html"},"ChangeNotifier")," the previousValue and newValue will be the same"))),(0,i.kt)("p",null,"since they reference the same ",(0,i.kt)("inlineCode",{parentName:"p"},"StateController")," / ",(0,i.kt)("inlineCode",{parentName:"p"},"ChangeNotifier"),"."))}m.isMDXComponent=!0}}]);