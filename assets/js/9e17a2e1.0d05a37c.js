"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[597],{2237:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return d},default:function(){return c}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=(n(6396),n(8215),["components"]),s={title:".autoDispose"},l=void 0,p={unversionedId:"concepts/modifiers/auto_dispose",id:"concepts/modifiers/auto_dispose",title:".autoDispose",description:"p\xe1gina n\xe3o traduzida, ainda.",source:"@site/i18n/pt-BR/docusaurus-plugin-content-docs/current/concepts/modifiers/auto_dispose.mdx",sourceDirName:"concepts/modifiers",slug:"/concepts/modifiers/auto_dispose",permalink:"/riverpod/docs/concepts/modifiers/auto_dispose",editUrl:"https://github.com/rrousselGit/river_pod/edit/master/website/i18n/pt-BR/docusaurus-plugin-content-docs/current/concepts/modifiers/auto_dispose.mdx",tags:[],version:"current",frontMatter:{title:".autoDispose"},sidebar:"Sidebar",previous:{title:".family",permalink:"/riverpod/docs/concepts/modifiers/family"},next:{title:"ProviderObserver",permalink:"/riverpod/docs/concepts/provider_observer"}},d=[{value:"Usage",id:"usage",children:[{value:"ref.keepAlive",id:"refkeepalive",children:[],level:3}],level:2},{value:"Example: Canceling HTTP requests when no longer used",id:"example-canceling-http-requests-when-no-longer-used",children:[],level:2},{value:"The argument type &#39;AutoDisposeProvider&#39; can&#39;t be assigned to the parameter type &#39;AlwaysAliveProviderBase&#39;",id:"the-argument-type-autodisposeprovider-cant-be-assigned-to-the-parameter-type-alwaysaliveproviderbase",children:[],level:2}],u={toc:d};function c(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"p\xe1gina n\xe3o traduzida, ainda."),(0,o.kt)("p",null,"A common use case is to destroy the state of a provider\nwhen it is no-longer used."),(0,o.kt)("p",null,"There are multiple reasons for doing so, such as:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"When using Firebase, to close the connection and avoid unnecessary cost."),(0,o.kt)("li",{parentName:"ul"},"To reset the state when the user leaves a screen and re-enters it.")),(0,o.kt)("p",null,"Providers come with built-in support for this use case, through the ",(0,o.kt)("inlineCode",{parentName:"p"},".autoDispose"),"\nmodifier."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"To tell Riverpod to destroy the state of a provider when it is no longer used,\nsimply append ",(0,o.kt)("inlineCode",{parentName:"p"},".autoDispose")," to your provider:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final userProvider = StreamProvider.autoDispose<User>((ref) {\n\n});\n")),(0,o.kt)("p",null,"That's it. Now, the state of ",(0,o.kt)("inlineCode",{parentName:"p"},"userProvider")," will automatically be destroyed\nwhen it is no longer used."),(0,o.kt)("p",null,"Note how the generic parameters are passed after ",(0,o.kt)("inlineCode",{parentName:"p"},"autoDispose")," instead of before \u2013\n",(0,o.kt)("inlineCode",{parentName:"p"},"autoDispose")," is not a named constructor."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"You can combine ",(0,o.kt)("inlineCode",{parentName:"p"},".autoDispose")," with other modifiers if you need to:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final userProvider = StreamProvider.autoDispose.family<User, String>((ref, id) {\n\n});\n")))),(0,o.kt)("h3",{id:"refkeepalive"},"ref.keepAlive"),(0,o.kt)("p",null,"Marking a provider with ",(0,o.kt)("inlineCode",{parentName:"p"},"autoDispose")," also adds an extra method on ",(0,o.kt)("inlineCode",{parentName:"p"},"ref"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"keepAlive"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"keep")," function is used to tell Riverpod that the state of the provider\nshould be preserved even if no longer listened to."),(0,o.kt)("p",null,"A use-case would be to set this flag to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," after an HTTP request have\ncompleted:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final myProvider = FutureProvider.autoDispose((ref) async {\n  final response = await httpClient.get(...);\n  ref.keepAlive();\n  return response;\n});\n")),(0,o.kt)("p",null,"This way, if the request failed and the UI leaves the screen then re-enters\nit, then the request will be performed again.\nBut if the request completed successfully, the state will be preserved\nand re-entering the screen will not trigger a new request."),(0,o.kt)("h2",{id:"example-canceling-http-requests-when-no-longer-used"},"Example: Canceling HTTP requests when no longer used"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"autoDispose")," modifier could be combined with ",(0,o.kt)("a",{parentName:"p",href:"../../providers/future_provider"},"FutureProvider")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ref.onDispose"),"\nto easily cancel HTTP requests when they are no longer needed."),(0,o.kt)("p",null,"The goal is:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Start an HTTP request when the user enters a screen"),(0,o.kt)("li",{parentName:"ul"},"if the user leaves the screen before the request completed, cancel the HTTP request"),(0,o.kt)("li",{parentName:"ul"},"if the request succeeded, leaving and re-entering the screen does not start a new request")),(0,o.kt)("p",null,"In code, this would be:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final myProvider = FutureProvider.autoDispose((ref) async {\n  // An object from package:dio that allows cancelling http requests\n  final cancelToken = CancelToken();\n  // When the provider is destroyed, cancel the http request\n  ref.onDispose(() => cancelToken.cancel());\n\n  // Fetch our data and pass our `cancelToken` for cancellation to work\n  final response = await dio.get('path', cancelToken: cancelToken);\n  // If the request completed successfully, keep the state\n  ref.keepAlive();\n  return response;\n});\n")),(0,o.kt)("h2",{id:"the-argument-type-autodisposeprovider-cant-be-assigned-to-the-parameter-type-alwaysaliveproviderbase"},"The argument type 'AutoDisposeProvider' can't be assigned to the parameter type 'AlwaysAliveProviderBase'"),(0,o.kt)("p",null,"When using ",(0,o.kt)("inlineCode",{parentName:"p"},".autoDispose"),", you may find yourself in a situation where your\napplication does not compile with an error similar to:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The argument type 'AutoDisposeProvider' can't be assigned to the parameter\ntype 'AlwaysAliveProviderBase'")),(0,o.kt)("p",null,"Don't worry! This error is voluntary. It happens because you most likely\nhave a bug:"),(0,o.kt)("p",null,"You tried to listen to a provider marked with ",(0,o.kt)("inlineCode",{parentName:"p"},".autoDispose")," in a provider that\nis ",(0,o.kt)("strong",{parentName:"p"},"not")," marked with ",(0,o.kt)("inlineCode",{parentName:"p"},".autoDispose"),", such as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final firstProvider = Provider.autoDispose((ref) => 0);\n\nfinal secondProvider = Provider((ref) {\n  // The argument type 'AutoDisposeProvider<int>' can't be assigned to the\n  // parameter type 'AlwaysAliveProviderBase<Object, Null>'\n  ref.watch(firstProvider);\n});\n")),(0,o.kt)("p",null,"This is undesired, as it would cause ",(0,o.kt)("inlineCode",{parentName:"p"},"firstProvider")," to never be disposed."),(0,o.kt)("p",null,"To fix this, consider marking ",(0,o.kt)("inlineCode",{parentName:"p"},"secondProvider")," with ",(0,o.kt)("inlineCode",{parentName:"p"},".autoDispose")," too:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final firstProvider = Provider.autoDispose((ref) => 0);\n\nfinal secondProvider = Provider.autoDispose((ref) {\n  ref.watch(firstProvider);\n});\n")))}c.isMDXComponent=!0}}]);