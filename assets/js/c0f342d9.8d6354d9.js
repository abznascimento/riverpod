"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[172],{1551:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return l},default:function(){return h}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],s={title:"Combining Provider States"},d=void 0,p={unversionedId:"concepts/combining_providers",id:"concepts/combining_providers",title:"Combining Provider States",description:"p\xe1gina n\xe3o traduzida, ainda.",source:"@site/i18n/pt-BR/docusaurus-plugin-content-docs/current/concepts/combining_providers.mdx",sourceDirName:"concepts",slug:"/concepts/combining_providers",permalink:"/docs/concepts/combining_providers",editUrl:"https://github.com/rrousselGit/river_pod/edit/master/website/i18n/pt-BR/docusaurus-plugin-content-docs/current/concepts/combining_providers.mdx",tags:[],version:"current",frontMatter:{title:"Combining Provider States"},sidebar:"Sidebar",previous:{title:"Reading a Provider",permalink:"/docs/concepts/reading"},next:{title:".family",permalink:"/docs/concepts/modifiers/family"}},l=[{value:"Combining provider states",id:"combining-provider-states",children:[],level:2},{value:"FAQ",id:"faq",children:[{value:"What if the value being listened to changes over time?",id:"what-if-the-value-being-listened-to-changes-over-time",children:[],level:3},{value:"Can I read a provider without listening to it?",id:"can-i-read-a-provider-without-listening-to-it",children:[],level:3},{value:"How to test an object that receives read as a parameter of its constructor?",id:"how-to-test-an-object-that-receives-read-as-a-parameter-of-its-constructor",children:[],level:3},{value:"My provider updates too often, what can I do?",id:"my-provider-updates-too-often-what-can-i-do",children:[],level:3}],level:2}],c={toc:l};function h(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"p\xe1gina n\xe3o traduzida, ainda."),(0,o.kt)("p",null,"Make sure to ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/providers"},"read about Providers")," first.",(0,o.kt)("br",{parentName:"p"}),"\n","In this guide, we will learn about combining provider states."),(0,o.kt)("h2",{id:"combining-provider-states"},"Combining provider states"),(0,o.kt)("p",null,"We've previously seen how to create a simple provider. But the reality is,\nin many situations a provider will want to read the state of another provider."),(0,o.kt)("p",null,"To do that, we can use the ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/Ref-class.html"},"ref")," object passed to the callback of our provider,\nand use its ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/Ref/watch.html"},"watch")," method."),(0,o.kt)("p",null,"As an example, consider the following provider:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final cityProvider = Provider((ref) => 'London');\n")),(0,o.kt)("p",null,"We can now create another provider that will consume our ",(0,o.kt)("inlineCode",{parentName:"p"},"cityProvider"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final weatherProvider = FutureProvider((ref) async {\n  // We use `ref.watch` to listen to another provider, and we pass it the provider\n  // that we want to consume. Here: cityProvider\n  final city = ref.watch(cityProvider);\n\n  // We can then use the result to do something based on the value of `cityProvider`.\n  return fetchWeather(city: city);\n});\n")),(0,o.kt)("p",null,"That's it. We've created a provider that depends on another provider."),(0,o.kt)("h2",{id:"faq"},"FAQ"),(0,o.kt)("h3",{id:"what-if-the-value-being-listened-to-changes-over-time"},"What if the value being listened to changes over time?"),(0,o.kt)("p",null,"Depending on the provider that you are listening to, the value obtained may\nchange over time.\nFor example, you may be listening to a ",(0,o.kt)("a",{parentName:"p",href:"../providers/state_notifier_provider"},"StateNotifierProvider"),", or the provider\nbeing listened to may have been forced to refresh through the use of\n",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/ProviderContainer/refresh.html"},"ProviderContainer.refresh"),"/",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/WidgetRef/refresh.html"},"ref.refresh"),"."),(0,o.kt)("p",null,"When using ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/Ref/watch.html"},"watch"),", Riverpod is able to detect that the value being listened to changed\nand will ",(0,o.kt)("em",{parentName:"p"},"automatically")," re-execute the provider's creation callback when needed."),(0,o.kt)("p",null,"This can be useful for computed states.\nFor example, consider a ",(0,o.kt)("a",{parentName:"p",href:"../providers/state_notifier_provider"},"StateNotifierProvider")," that exposes a todo-list:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"class TodoList extends StateNotifier<List<Todo>> {\n  TodoList(): super(const []);\n}\n\nfinal todoListProvider = StateNotifierProvider((ref) => TodoList());\n")),(0,o.kt)("p",null,"A common use-case would be to have the UI filter the list of todos to show\nonly the completed/uncompleted todos."),(0,o.kt)("p",null,"An easy way to implement such a scenario would be to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"create a ",(0,o.kt)("a",{parentName:"p",href:"../providers/state_provider"},"StateProvider"),", which exposes the currently selected filter method:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"enum Filter {\n  none,\n  completed,\n  uncompleted,\n}\n\nfinal filterProvider = StateProvider((ref) => Filter.none);\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"make a separate provider which combines the filter method and the todo-list\nto expose the filtered todo-list:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final filteredTodoListProvider = Provider<List<Todo>>((ref) {\n  final filter = ref.watch(filterProvider);\n  final todos = ref.watch(todoListProvider);\n\n  switch (filter) {\n    case Filter.none:\n      return todos;\n    case Filter.completed:\n      return todos.where((todo) => todo.completed).toList();\n    case Filter.uncompleted:\n      return todos.where((todo) => !todo.completed).toList();\n  }\n});\n")))),(0,o.kt)("p",null,"Then, our UI can listen to ",(0,o.kt)("inlineCode",{parentName:"p"},"filteredTodoListProvider")," to listen to the filtered todo-list.",(0,o.kt)("br",{parentName:"p"}),"\n","Using such an approach, the UI will automatically update when either the filter\nor the todo-list changes."),(0,o.kt)("p",null,"To see this approach in action, you can look at the source code of the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/rrousselGit/river_pod/tree/master/examples/todos"},"Todo List\nexample"),"."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"This behavior is not specific to ",(0,o.kt)("a",{parentName:"p",href:"../providers/provider"},"Provider"),", and works with all providers."),(0,o.kt)("p",{parentName:"div"},"For example, you could combine ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/Ref/watch.html"},"watch")," with ",(0,o.kt)("a",{parentName:"p",href:"../providers/future_provider"},"FutureProvider")," to implement a search\nfeature that supports live-configuration changes:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"// The current search filter\nfinal searchProvider = StateProvider((ref) => '');\n\n/// Configurations which can change over time\nfinal configsProvider = StreamProvider<Configuration>(...);\n\nfinal charactersProvider = FutureProvider<List<Character>>((ref) async {\n  final search = ref.watch(searchProvider);\n  final configs = await ref.watch(configsProvider.future);\n  final response = await dio.get('${configs.host}/characters?search=$search');\n\n  return response.data.map((json) => Character.fromJson(json)).toList();\n});\n")),(0,o.kt)("p",{parentName:"div"},"This code will fetch a list of characters from the service, and automatically\nre-fetch the list whenever the configurations change or when the search query changes."))),(0,o.kt)("h3",{id:"can-i-read-a-provider-without-listening-to-it"},"Can I read a provider without listening to it?"),(0,o.kt)("p",null,"Sometimes, we want to read the content of a provider, but without re-creating\nthe value exposed when the value obtained changes."),(0,o.kt)("p",null,"An example would be a ",(0,o.kt)("inlineCode",{parentName:"p"},"Repository"),", which reads from another provider the user token\nfor authentication.",(0,o.kt)("br",{parentName:"p"}),"\n","We could use ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/Ref/watch.html"},"watch")," and create a new ",(0,o.kt)("inlineCode",{parentName:"p"},"Repository")," whenever the user token changes,\nbut there is little to no use in doing that."),(0,o.kt)("p",null,"In this situation, we can use ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/Ref/read.html"},"read"),", which is similar to ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/Ref/watch.html"},"watch"),", but will not\ncause the provider to recreate the value it exposes when the value obtained changes."),(0,o.kt)("p",null,"In that case, a common practice is to pass ",(0,o.kt)("inlineCode",{parentName:"p"},"ref.read")," to the object created.\nThe object created will then be able to read providers whenever it wants."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final userTokenProvider = StateProvider<String>((ref) => null);\n\nfinal repositoryProvider = Provider((ref) => Repository(ref.read));\n\nclass Repository {\n  Repository(this.read);\n\n  /// The `ref.read` function\n  final Reader read;\n\n  Future<Catalog> fetchCatalog() async {\n    String token = read(userTokenProvider);\n\n    final response = await dio.get('/path', queryParameters: {\n      'token': token,\n    });\n\n    return Catalog.fromJson(response.data);\n  }\n}\n")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"You could also pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"ref")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"ref.read")," to your object:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final repositoryProvider = Provider((ref) => Repository(ref));\n\nclass Repository {\n  Repository(this.ref);\n\n  final Ref ref;\n}\n")),(0,o.kt)("p",{parentName:"div"},"The only difference that passing ",(0,o.kt)("inlineCode",{parentName:"p"},"ref.read")," brings is that it is\nslightly less verbose and ensures that our object never uses ",(0,o.kt)("inlineCode",{parentName:"p"},"ref.watch"),"."))),(0,o.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),(0,o.kt)("strong",{parentName:"h5"},"DON'T")," call ",(0,o.kt)("a",{parentName:"h5",href:"https://pub.dev/documentation/riverpod/latest/riverpod/Ref/read.html"},"read")," inside the body of a provider")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final myProvider = Provider((ref) {\n  // Bad practice to call `read` here\n  final value = ref.read(anotherProvider);\n});\n")),(0,o.kt)("p",{parentName:"div"},"If you used ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/Ref/read.html"},"read")," as an attempt to avoid unwanted rebuilds of your object,\nrefer to ",(0,o.kt)("a",{parentName:"p",href:"#my-provider-updates-too-often-what-can-i-do"},"My provider updates too often, what can I do?")))),(0,o.kt)("h3",{id:"how-to-test-an-object-that-receives-read-as-a-parameter-of-its-constructor"},"How to test an object that receives ",(0,o.kt)("a",{parentName:"h3",href:"https://pub.dev/documentation/riverpod/latest/riverpod/Ref/read.html"},"read")," as a parameter of its constructor?"),(0,o.kt)("p",null,"If you are using the pattern described in ",(0,o.kt)("a",{parentName:"p",href:"#can-i-read-a-provider-without-listening-to-it"},"Can I read a provider without listening to it?"),",\nyou may be wondering how to write tests for your object."),(0,o.kt)("p",null,"In this scenario, consider testing the provider directly instead of the raw object.\nYou can do so by using the ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/ProviderContainer-class.html"},"ProviderContainer")," class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final repositoryProvider = Provider((ref) => Repository(ref.read));\n\ntest('fetches catalog', () async {\n  final container = ProviderContainer();\n  addTearOff(container.dispose);\n\n  Repository repository = container.read(repositoryProvider);\n\n  await expectLater(\n    repository.fetchCatalog(),\n    completion(Catalog()),\n  );\n});\n")),(0,o.kt)("h3",{id:"my-provider-updates-too-often-what-can-i-do"},"My provider updates too often, what can I do?"),(0,o.kt)("p",null,"If your object is re-created too often your provider is likely listening\nto objects that it doesn't care about."),(0,o.kt)("p",null,"For example, you may be listening to a ",(0,o.kt)("inlineCode",{parentName:"p"},"Configuration")," object, but only use the ",(0,o.kt)("inlineCode",{parentName:"p"},"host"),"\nproperty.",(0,o.kt)("br",{parentName:"p"}),"\n","By listening to the entire ",(0,o.kt)("inlineCode",{parentName:"p"},"Configuration")," object, if a property other than ",(0,o.kt)("inlineCode",{parentName:"p"},"host"),"\nchanges, this still causes your provider to be re-evaluated \u2013 which may be\nundesired."),(0,o.kt)("p",null,"The solution to this problem is to create a separate provider that exposes ",(0,o.kt)("em",{parentName:"p"},"only"),"\nwhat you need in ",(0,o.kt)("inlineCode",{parentName:"p"},"Configuration")," (so ",(0,o.kt)("inlineCode",{parentName:"p"},"host"),"):"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"AVOID")," listening to the entire object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final configProvider = StreamProvider<Configuration>(...);\n\nfinal productsProvider = FutureProvider<List<Product>>((ref) async {\n  // Will cause productsProvider to re-fetch the products if anything in the\n  // configurations changes\n  final configs = await ref.watch(configProvider.future);\n\n  return dio.get('${configs.host}/products');\n});\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"PREFER")," using select when you only need a single property of an object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final configProvider = StreamProvider<Configuration>(...);\n\nfinal productsProvider = FutureProvider<List<Product>>((ref) async {\n  // Listens only to the host. If something else in the configurations\n  // changes, this will not pointlessly re-evaluate our provider.\n  final host = await ref.watch(configProvider.selectAsync((config) => config.host));\n\n  return dio.get('$host/products');\n});\n")),(0,o.kt)("p",null,"This will only rebuild the ",(0,o.kt)("inlineCode",{parentName:"p"},"productsProvider")," when the ",(0,o.kt)("inlineCode",{parentName:"p"},"host")," changes."))}h.isMDXComponent=!0}}]);