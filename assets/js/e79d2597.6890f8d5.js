"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[577],{8610:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return s},default:function(){return c}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={title:"^0.14.0 to ^1.0.0"},d=void 0,p={unversionedId:"migration/0.14.0_to_1.0.0",id:"migration/0.14.0_to_1.0.0",title:"^0.14.0 to ^1.0.0",description:"p\xe1gina n\xe3o traduzida, ainda.",source:"@site/i18n/pt-BR/docusaurus-plugin-content-docs/current/migration/0.14.0_to_1.0.0.mdx",sourceDirName:"migration",slug:"/migration/0.14.0_to_1.0.0",permalink:"/riverpod/docs/migration/0.14.0_to_1.0.0",editUrl:"https://github.com/rrousselGit/river_pod/edit/master/website/i18n/pt-BR/docusaurus-plugin-content-docs/current/migration/0.14.0_to_1.0.0.mdx",tags:[],version:"current",frontMatter:{title:"^0.14.0 to ^1.0.0"},sidebar:"Sidebar",previous:{title:"^0.13.0 to ^0.14.0",permalink:"/riverpod/docs/migration/0.13.0_to_0.14.0"},next:{title:"Provider",permalink:"/riverpod/docs/providers/provider"}},s=[{value:"Using the migration tool to automatically upgrade your project to the new syntax",id:"using-the-migration-tool-to-automatically-upgrade-your-project-to-the-new-syntax",children:[{value:"Installing the command line tool",id:"installing-the-command-line-tool",children:[],level:3},{value:"Usage",id:"usage",children:[],level:3}],level:2},{value:"The changes",id:"the-changes",children:[{value:"Syntax unification",id:"syntax-unification",children:[],level:3},{value:"StateProvider update",id:"stateprovider-update",children:[],level:3}],level:2}],u={toc:s};function c(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"p\xe1gina n\xe3o traduzida, ainda."),(0,o.kt)("p",null,"After a long wait, the first stable version of Riverpod is finally released \ud83d\udc4f"),(0,o.kt)("p",null,"To see the full list of changes, consult the ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages/flutter_riverpod/changelog#100"},"Changelog"),".",(0,o.kt)("br",{parentName:"p"}),"\n","In this page, we will focus on how to migrate an existing Riverpod application\nfrom version 0.14.x to version 1.0.0."),(0,o.kt)("h2",{id:"using-the-migration-tool-to-automatically-upgrade-your-project-to-the-new-syntax"},"Using the migration tool to automatically upgrade your project to the new syntax"),(0,o.kt)("p",null,"Before explaining the various changes, it is worth noting that Riverpod comes with\na command-line tool to automatically migrate your project for you."),(0,o.kt)("h3",{id:"installing-the-command-line-tool"},"Installing the command line tool"),(0,o.kt)("p",null,"To install the migration tool, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"dart pub global activate riverpod_cli\n")),(0,o.kt)("p",null,"You should now be able to run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"riverpod --help\n")),(0,o.kt)("h3",{id:"usage"},"Usage"),(0,o.kt)("p",null,"Now that the command line is installed, we can start using it."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"First, open the project you want to migrate in your terminal.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Do not")," upgrade Riverpod.",(0,o.kt)("br",{parentName:"p"}),"\n","The migration tool will upgrade the version of Riverpod for you."),(0,o.kt)("div",{parentName:"li",className:"admonition admonition-danger alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"danger")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Not upgrading Riverpod is important.",(0,o.kt)("br",{parentName:"p"}),"\n","The tool will not execute properly if you have already installed version 1.0.0.\nAs such, make sure that you are properly using an older version before starting the tool.")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Make sure that your project does not contain errors.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Execute:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"riverpod migrate\n")))),(0,o.kt)("p",null,"The tool will then analyze your project and suggest changes. For example you may see:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"-Widget build(BuildContext context, ScopedReader watch) {\n+Widget build(BuildContext context, Widget ref) {\n-  MyModel state = watch(provider);\n+  MyModel state = ref.watch(provider);\n}\n\nAccept change (y = yes, n = no [default], A = yes to all, q = quit)?\n")),(0,o.kt)("p",null,"To accept the change, simply press ",(0,o.kt)("kbd",null,"y"),". Otherwise to reject it, press ",(0,o.kt)("kbd",null,"n"),"."),(0,o.kt)("h2",{id:"the-changes"},"The changes"),(0,o.kt)("p",null,"Now that we've seen how to use the CLI to automatically upgrade your project,\nlet's see in detail the changes necessary."),(0,o.kt)("h3",{id:"syntax-unification"},"Syntax unification"),(0,o.kt)("p",null,"Version 1.0.0 of Riverpod focused on the unification of the syntax for\ninteracting with providers.",(0,o.kt)("br",{parentName:"p"}),"\n","Before, Riverpod had many similar yet different syntaxes for reading a provider,\nsuch as ",(0,o.kt)("inlineCode",{parentName:"p"},"ref.watch(provider)")," vs ",(0,o.kt)("inlineCode",{parentName:"p"},"useProvider(provider)")," vs ",(0,o.kt)("inlineCode",{parentName:"p"},"watch(provider)"),".",(0,o.kt)("br",{parentName:"p"}),"\n","With version 1.0.0, only one syntax remains: ",(0,o.kt)("inlineCode",{parentName:"p"},"ref.watch(provider)"),". The\nothers were removed."),(0,o.kt)("p",null,"As such:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"useProvider")," is removed in favor of ",(0,o.kt)("inlineCode",{parentName:"p"},"HookConsumerWidget"),"."),(0,o.kt)("p",{parentName:"li"},"Before:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"class Example extends HookWidget {\n  @override\n  Widget build(BuildContext context) {\n    useState(...);\n    int count = useProvider(counterProvider);\n    ...\n  }\n}\n")),(0,o.kt)("p",{parentName:"li"},"After:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"class Example extends HookConsumerWidget {\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    useState(...);\n    int count = ref.watch(counterProvider);\n    ...\n  }\n}\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The prototype of ",(0,o.kt)("inlineCode",{parentName:"p"},"ConsumerWidget"),"'s ",(0,o.kt)("inlineCode",{parentName:"p"},"build")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Consumer"),"'s ",(0,o.kt)("inlineCode",{parentName:"p"},"builder")," changed."),(0,o.kt)("p",{parentName:"li"},"Before:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"class Example extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, ScopedReader watch) {\n    int count = watch(counterProvider);\n    ...\n  }\n}\n\nConsumer(\n  builder: (context, watch, child) {\n    int count = watch(counterProvider);\n    ...\n  }\n)\n")),(0,o.kt)("p",{parentName:"li"},"After:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"class Example extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    int count = ref.watch(counterProvider);\n    ...\n  }\n}\n\nConsumer(\n  builder: (context, ref, child) {\n    int count = ref.watch(counterProvider);\n    ...\n  }\n)\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"context.read")," is removed in favor of ",(0,o.kt)("inlineCode",{parentName:"p"},"ref.read"),"."),(0,o.kt)("p",{parentName:"li"},"Before:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"class Example extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    SomeButton(\n      onPressed: () => context.read(provider.notifier).doSomething(),\n    );\n  }\n}\n")),(0,o.kt)("p",{parentName:"li"},"After:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"class Example extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    SomeButton(\n      onPressed: () => ref.read(provider.notifier).doSomething(),\n    );\n  }\n}\n")))),(0,o.kt)("h3",{id:"stateprovider-update"},"StateProvider update"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"../providers/state_provider"},"StateProvider")," was updated to match ",(0,o.kt)("a",{parentName:"p",href:"../providers/state_notifier_provider"},"StateNotifierProvider"),"."),(0,o.kt)("p",null,"Before, doing ",(0,o.kt)("inlineCode",{parentName:"p"},"ref.watch(StateProvider)")," returned a ",(0,o.kt)("inlineCode",{parentName:"p"},"StateController")," instance.\nNow it only returns the state of the ",(0,o.kt)("inlineCode",{parentName:"p"},"StateController"),"."),(0,o.kt)("p",null,"To migrate you have a few solutions.",(0,o.kt)("br",{parentName:"p"}),"\n","If your code only obtained the state without modifying it, you can change from:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final provider = StateProvider<int>(...);\n\nConsumer(\n  builder: (context, ref, child) {\n    StateController<int> count = ref.watch(provider);\n\n    return Text('${count.state}');\n  }\n)\n")),(0,o.kt)("p",null,"to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final provider = StateProvider<int>(...);\n\nConsumer(\n  builder: (context, ref, child) {\n    int count = ref.watch(provider);\n\n    return Text('${count}');\n  }\n)\n")),(0,o.kt)("p",null,"Alternatively you can use the new ",(0,o.kt)("inlineCode",{parentName:"p"},"StateProvider.state")," to keep the old behavior."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final provider = StateProvider<int>(...);\n\nConsumer(\n  builder: (context, ref, child) {\n    StateController<int> count = ref.watch(provider.state);\n\n    return Text('${count.state}');\n  }\n)\n")))}c.isMDXComponent=!0}}]);