"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[945],{8568:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return p},default:function(){return m}});var a=r(7462),i=r(3366),n=(r(7294),r(3905)),s=["components"],o={title:"StreamProvider"},l=void 0,d={unversionedId:"providers/stream_provider",id:"providers/stream_provider",title:"StreamProvider",description:"p\xe1gina n\xe3o traduzida, ainda.",source:"@site/i18n/pt-BR/docusaurus-plugin-content-docs/current/providers/stream_provider.mdx",sourceDirName:"providers",slug:"/providers/stream_provider",permalink:"/docs/providers/stream_provider",editUrl:"https://github.com/rrousselGit/river_pod/edit/master/website/i18n/pt-BR/docusaurus-plugin-content-docs/current/providers/stream_provider.mdx",tags:[],version:"current",frontMatter:{title:"StreamProvider"},sidebar:"Sidebar",previous:{title:"FutureProvider",permalink:"/docs/providers/future_provider"},next:{title:"StateProvider",permalink:"/docs/providers/state_provider"}},p=[],u={toc:p};function m(e){var t=e.components,r=(0,i.Z)(e,s);return(0,n.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"p\xe1gina n\xe3o traduzida, ainda."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"StreamProvider")," is similar to ",(0,n.kt)("a",{parentName:"p",href:"./future_provider"},"FutureProvider")," but for ",(0,n.kt)("a",{parentName:"p",href:"https://api.dart.dev/dart-async/Stream-class.html"},"Stream"),"s instead of\n",(0,n.kt)("a",{parentName:"p",href:"https://api.dart.dev/dart-async/Future-class.html"},"Future"),"s."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"StreamProvider")," is usually used for:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"listening to Firebase or web-sockets"),(0,n.kt)("li",{parentName:"ul"},"rebuilding another provider every few seconds")),(0,n.kt)("p",null,"Since ",(0,n.kt)("a",{parentName:"p",href:"https://api.dart.dev/dart-async/Stream-class.html"},"Stream"),"s naturally expose a way for listening to updates, some may think\nthat using ",(0,n.kt)("inlineCode",{parentName:"p"},"StreamProvider")," has a low value. In particular, you may believe that\nFlutter's ",(0,n.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/StreamBuilder-class.html"},"StreamBuilder")," would work just as well for listening to a ",(0,n.kt)("a",{parentName:"p",href:"https://api.dart.dev/dart-async/Stream-class.html"},"Stream"),", but\nthis is a mistake."),(0,n.kt)("p",null,"Using ",(0,n.kt)("inlineCode",{parentName:"p"},"StreamProvider")," over ",(0,n.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/StreamBuilder-class.html"},"StreamBuilder")," has numerous benefits:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"it allows other providers to listen to the stream using ",(0,n.kt)("a",{parentName:"li",href:"../concepts/reading#using-refwatch-to-observe-a-provider"},"ref.watch"),"."),(0,n.kt)("li",{parentName:"ul"},"it ensures that loading and error cases are properly handled, thanks to ",(0,n.kt)("a",{parentName:"li",href:"https://pub.dev/documentation/riverpod/latest/riverpod/AsyncValue-class.html"},"AsyncValue"),"."),(0,n.kt)("li",{parentName:"ul"},"it removes the need for having to differentiate broadcast streams vs normal streams."),(0,n.kt)("li",{parentName:"ul"},"it caches the latest value emitted by the stream, ensuring that if a\nlistener is added after an event is emitted, the listener will still have\nimmediate access to the most up-to-date event."),(0,n.kt)("li",{parentName:"ul"},"it allows easily mocking the stream during tests by overriding the ",(0,n.kt)("inlineCode",{parentName:"li"},"StreamProvider"),".")))}m.isMDXComponent=!0}}]);