"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[199],{3597:function(e,t,o){o.r(t),o.d(t,{contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return m}});var n=o(7462),i=o(3366),r=(o(7294),o(3905)),a=(o(6396),o(8215),o(9055)),d=o(4214),s=["components"],l={title:"ChangeNotifierProvider"},p=void 0,u={unversionedId:"providers/change_notifier_provider",id:"providers/change_notifier_provider",title:"ChangeNotifierProvider",description:"p\xe1gina n\xe3o traduzida, ainda.",source:"@site/i18n/pt-BR/docusaurus-plugin-content-docs/current/providers/change_notifier_provider.mdx",sourceDirName:"providers",slug:"/providers/change_notifier_provider",permalink:"/docs/providers/change_notifier_provider",editUrl:"https://github.com/rrousselGit/river_pod/edit/master/website/i18n/pt-BR/docusaurus-plugin-content-docs/current/providers/change_notifier_provider.mdx",tags:[],version:"current",frontMatter:{title:"ChangeNotifierProvider"},sidebar:"Sidebar",previous:{title:"StateProvider",permalink:"/docs/providers/state_provider"}},m=[],c={toc:m};function f(e){var t=e.components,o=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"p\xe1gina n\xe3o traduzida, ainda."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ChangeNotifierProvider")," (flutter_riverpod/hooks_riverpod only) is a provider that\nis used to listen to and expose a ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/state_notifier/latest/state_notifier/ChangeNotifier-class.html"},"ChangeNotifier")," from Flutter itself."),(0,r.kt)("p",null,"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"ChangeNotifierProvider")," is discouraged by Riverpod and exists primarily for:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"an easy transition from ",(0,r.kt)("inlineCode",{parentName:"li"},"package:provider")," when using its ",(0,r.kt)("inlineCode",{parentName:"li"},"ChangeNotifierProvider")),(0,r.kt)("li",{parentName:"ul"},"supporting mutable state, even though immutable state is preferred")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Prefer using ",(0,r.kt)("a",{parentName:"p",href:"./state_notifier_provider"},"StateNotifierProvider")," instead.",(0,r.kt)("br",{parentName:"p"}),"\n","Consider using ",(0,r.kt)("inlineCode",{parentName:"p"},"ChangeNotifierProvider")," only if you are absolutely certain\nthat you want mutable state."))),(0,r.kt)("p",null,"Using mutable state instead of immutable state can sometimes be more efficient.\nThe downside is, it can be harder to maintain and may break various features.",(0,r.kt)("br",{parentName:"p"}),"\n","For example, using ",(0,r.kt)("inlineCode",{parentName:"p"},"provider.select")," to optimize rebuilds of your widgets\nmay not work if your state is mutable, as ",(0,r.kt)("inlineCode",{parentName:"p"},"select")," will think that the value\nhasn't changed.",(0,r.kt)("br",{parentName:"p"}),"\n","As such, using immutable data structures can sometimes be faster. Therefore\nit is important to make benchmarks specific to your use-case, to make sure\nthat you are truly gaining performance by using ",(0,r.kt)("inlineCode",{parentName:"p"},"ChangeNotifierProvider"),"."),(0,r.kt)("p",null,"As a usage example, we could use ",(0,r.kt)("inlineCode",{parentName:"p"},"ChangeNotifierProvider")," to implement a todo-list.\nDoing so would allow us to expose methods such as ",(0,r.kt)("inlineCode",{parentName:"p"},"addTodo")," to let the UI\nmodify the list of todos on user interactions:"),(0,r.kt)(a.Z,{mdxType:"CodeBlock"},(0,d.m)("import 'package:flutter/foundation.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\n/* SNIPPET START */\n\nclass Todo {\n  Todo({\n    required this.id,\n    required this.description,\n    required this.completed,\n  });\n\n  String id;\n  String description;\n  bool completed;\n}\n\nclass TodosNotifier extends ChangeNotifier {\n  final todos = <Todo>[];\n\n  // Let's allow the UI to add todos.\n  void addTodo(Todo todo) {\n    todos.add(todo);\n    notifyListeners();\n  }\n\n  // Let's allow removing todos\n  void removeTodo(String todoId) {\n    todos.remove(todos.firstWhere((element) => element.id == todoId));\n    notifyListeners();\n  }\n\n  // Let's mark a todo as completed\n  void toggle(String todoId) {\n    for (final todo in todos) {\n      if (todo.id == todoId) {\n        todo.completed = !todo.completed;\n        notifyListeners();\n      }\n    }\n  }\n}\n\n// Finally, we are using StateNotifierProvider to allow the UI to interact with\n// our TodosNotifier class.\nfinal todosProvider = ChangeNotifierProvider<TodosNotifier>((ref) {\n  return TodosNotifier();\n});\n")),(0,r.kt)("p",null,"Now that we have defined a ",(0,r.kt)("inlineCode",{parentName:"p"},"ChangeNotifierProvider"),", we can use it to interact\nwith the list of todos in our UI:"),(0,r.kt)(a.Z,{mdxType:"CodeBlock"},(0,d.m)("// ignore_for_file: omit_local_variable_types, prefer_final_locals\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\nimport 'todos.dart';\n\n/* SNIPPET START */\n\nclass TodoListView extends ConsumerWidget {\n  const TodoListView({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    // rebuild the widget when the todo list changes\n    List<Todo> todos = ref.watch(todosProvider).todos;\n\n    // Let's render the todos in a scrollable list view\n    return ListView(\n      children: [\n        for (final todo in todos)\n          CheckboxListTile(\n            value: todo.completed,\n            // When tapping on the todo, change its completed status\n            onChanged: (value) =>\n                ref.read(todosProvider.notifier).toggle(todo.id),\n            title: Text(todo.description),\n          ),\n      ],\n    );\n  }\n}\n")))}f.isMDXComponent=!0}}]);